
Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c6c  08002c6c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002c6c  08002c6c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c6c  08002c6c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c6c  08002c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000090  08002d04  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08002d04  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae5f  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd7  00000000  00000000  0002af18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002cef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b4e  00000000  00000000  0002e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f02a  00000000  00000000  00045efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008279e  00000000  00000000  00054f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d76c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c8  00000000  00000000  000d771c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c30 	.word	0x08002c30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08002c30 	.word	0x08002c30

0800014c <IsButtonPress>:
int TimerForKeyPress[5] = {300,300,300,300,300};

int button_flag[5];
int button_LongPress_flag[5];

int IsButtonPress(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <IsButtonPress+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <IsButtonPress+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <IsButtonPress+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <IsButtonPress+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000d0 	.word	0x200000d0

08000180 <subKeyProcess>:


void subKeyProcess(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000d0 	.word	0x200000d0

080001a0 <getIndex>:

int getIndex(int index) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b03      	cmp	r3, #3
 80001ac:	d823      	bhi.n	80001f6 <getIndex+0x56>
 80001ae:	a201      	add	r2, pc, #4	; (adr r2, 80001b4 <getIndex+0x14>)
 80001b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b4:	080001c5 	.word	0x080001c5
 80001b8:	080001d3 	.word	0x080001d3
 80001bc:	080001df 	.word	0x080001df
 80001c0:	080001eb 	.word	0x080001eb
	switch(index){
		case 0:
			return HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 80001c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c8:	480e      	ldr	r0, [pc, #56]	; (8000204 <getIndex+0x64>)
 80001ca:	f001 fd05 	bl	8001bd8 <HAL_GPIO_ReadPin>
 80001ce:	4603      	mov	r3, r0
 80001d0:	e013      	b.n	80001fa <getIndex+0x5a>
			break;
		case 1:
			return HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001d2:	2101      	movs	r1, #1
 80001d4:	480c      	ldr	r0, [pc, #48]	; (8000208 <getIndex+0x68>)
 80001d6:	f001 fcff 	bl	8001bd8 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	e00d      	b.n	80001fa <getIndex+0x5a>
			break;
		case 2:
			return HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001de:	2102      	movs	r1, #2
 80001e0:	4809      	ldr	r0, [pc, #36]	; (8000208 <getIndex+0x68>)
 80001e2:	f001 fcf9 	bl	8001bd8 <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	e007      	b.n	80001fa <getIndex+0x5a>
			break;
		case 3:
			return HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80001ea:	2104      	movs	r1, #4
 80001ec:	4806      	ldr	r0, [pc, #24]	; (8000208 <getIndex+0x68>)
 80001ee:	f001 fcf3 	bl	8001bd8 <HAL_GPIO_ReadPin>
 80001f2:	4603      	mov	r3, r0
 80001f4:	e001      	b.n	80001fa <getIndex+0x5a>
			break;
		default:
			break;
 80001f6:	bf00      	nop
	}
	return 0;
 80001f8:	2300      	movs	r3, #0
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40011000 	.word	0x40011000
 8000208:	40010800 	.word	0x40010800

0800020c <getKeyInput>:

void getKeyInput() {
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++) {
 8000212:	2300      	movs	r3, #0
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	e064      	b.n	80002e2 <getKeyInput+0xd6>
		KeyReg0[i] = KeyReg1[i];
 8000218:	4a36      	ldr	r2, [pc, #216]	; (80002f4 <getKeyInput+0xe8>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4935      	ldr	r1, [pc, #212]	; (80002f8 <getKeyInput+0xec>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000228:	4a34      	ldr	r2, [pc, #208]	; (80002fc <getKeyInput+0xf0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	4930      	ldr	r1, [pc, #192]	; (80002f4 <getKeyInput+0xe8>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		KeyReg2[i] = getIndex(i) ;
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f7ff ffb1 	bl	80001a0 <getIndex>
 800023e:	4602      	mov	r2, r0
 8000240:	492e      	ldr	r1, [pc, #184]	; (80002fc <getKeyInput+0xf0>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000248:	4a2b      	ldr	r2, [pc, #172]	; (80002f8 <getKeyInput+0xec>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000250:	4928      	ldr	r1, [pc, #160]	; (80002f4 <getKeyInput+0xe8>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000258:	429a      	cmp	r2, r3
 800025a:	d13f      	bne.n	80002dc <getKeyInput+0xd0>
 800025c:	4a25      	ldr	r2, [pc, #148]	; (80002f4 <getKeyInput+0xe8>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000264:	4925      	ldr	r1, [pc, #148]	; (80002fc <getKeyInput+0xf0>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026c:	429a      	cmp	r2, r3
 800026e:	d135      	bne.n	80002dc <getKeyInput+0xd0>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000270:	4a23      	ldr	r2, [pc, #140]	; (8000300 <getKeyInput+0xf4>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000278:	4920      	ldr	r1, [pc, #128]	; (80002fc <getKeyInput+0xf0>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000280:	429a      	cmp	r2, r3
 8000282:	d017      	beq.n	80002b4 <getKeyInput+0xa8>
				KeyReg3[i] = KeyReg2[i];
 8000284:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <getKeyInput+0xf0>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	491c      	ldr	r1, [pc, #112]	; (8000300 <getKeyInput+0xf4>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESS_STATE) {
 8000294:	4a19      	ldr	r2, [pc, #100]	; (80002fc <getKeyInput+0xf0>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d11d      	bne.n	80002dc <getKeyInput+0xd0>
					//todo
					subKeyProcess(i);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f7ff ff6d 	bl	8000180 <subKeyProcess>
					TimerForKeyPress[i] = 300;
 80002a6:	4a17      	ldr	r2, [pc, #92]	; (8000304 <getKeyInput+0xf8>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002b2:	e013      	b.n	80002dc <getKeyInput+0xd0>

				}
			} else {
				TimerForKeyPress[i]--;
 80002b4:	4a13      	ldr	r2, [pc, #76]	; (8000304 <getKeyInput+0xf8>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002bc:	1e5a      	subs	r2, r3, #1
 80002be:	4911      	ldr	r1, [pc, #68]	; (8000304 <getKeyInput+0xf8>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 80002c6:	4a0f      	ldr	r2, [pc, #60]	; (8000304 <getKeyInput+0xf8>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d104      	bne.n	80002dc <getKeyInput+0xd0>
					//todo
					KeyReg3[i] = NORMAL_STATE;
 80002d2:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <getKeyInput+0xf4>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2101      	movs	r1, #1
 80002d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 5; i++) {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3301      	adds	r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2b04      	cmp	r3, #4
 80002e6:	dd97      	ble.n	8000218 <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000014 	.word	0x20000014
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000028 	.word	0x20000028
 8000300:	2000003c 	.word	0x2000003c
 8000304:	20000050 	.word	0x20000050

08000308 <display7SEGA>:
int buffer_indexA[2];
int buffer_indexB[2];



void display7SEGA(int index) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b09      	cmp	r3, #9
 8000314:	f200 80bc 	bhi.w	8000490 <display7SEGA+0x188>
 8000318:	a201      	add	r2, pc, #4	; (adr r2, 8000320 <display7SEGA+0x18>)
 800031a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031e:	bf00      	nop
 8000320:	08000349 	.word	0x08000349
 8000324:	08000391 	.word	0x08000391
 8000328:	080003b1 	.word	0x080003b1
 800032c:	080003d1 	.word	0x080003d1
 8000330:	080003f1 	.word	0x080003f1
 8000334:	08000411 	.word	0x08000411
 8000338:	08000431 	.word	0x08000431
 800033c:	08000451 	.word	0x08000451
 8000340:	08000491 	.word	0x08000491
 8000344:	08000471 	.word	0x08000471


	switch (index) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, PB0_Pin, RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2101      	movs	r1, #1
 800034c:	4853      	ldr	r0, [pc, #332]	; (800049c <display7SEGA+0x194>)
 800034e:	f001 fc5a 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB1_Pin, RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	2102      	movs	r1, #2
 8000356:	4851      	ldr	r0, [pc, #324]	; (800049c <display7SEGA+0x194>)
 8000358:	f001 fc55 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB2_Pin, RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2104      	movs	r1, #4
 8000360:	484e      	ldr	r0, [pc, #312]	; (800049c <display7SEGA+0x194>)
 8000362:	f001 fc50 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin, RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	484c      	ldr	r0, [pc, #304]	; (800049c <display7SEGA+0x194>)
 800036c:	f001 fc4b 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB4_Pin, RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2110      	movs	r1, #16
 8000374:	4849      	ldr	r0, [pc, #292]	; (800049c <display7SEGA+0x194>)
 8000376:	f001 fc46 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB5_Pin, RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2120      	movs	r1, #32
 800037e:	4847      	ldr	r0, [pc, #284]	; (800049c <display7SEGA+0x194>)
 8000380:	f001 fc41 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB6_Pin, SET);
 8000384:	2201      	movs	r2, #1
 8000386:	2140      	movs	r1, #64	; 0x40
 8000388:	4844      	ldr	r0, [pc, #272]	; (800049c <display7SEGA+0x194>)
 800038a:	f001 fc3c 	bl	8001c06 <HAL_GPIO_WritePin>

		break;
 800038e:	e080      	b.n	8000492 <display7SEGA+0x18a>
	case 1:
		HAL_GPIO_WritePin(GPIOB, PB6_Pin | PB0_Pin, SET);
 8000390:	2201      	movs	r2, #1
 8000392:	2141      	movs	r1, #65	; 0x41
 8000394:	4841      	ldr	r0, [pc, #260]	; (800049c <display7SEGA+0x194>)
 8000396:	f001 fc36 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB1_Pin | PB2_Pin, RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2106      	movs	r1, #6
 800039e:	483f      	ldr	r0, [pc, #252]	; (800049c <display7SEGA+0x194>)
 80003a0:	f001 fc31 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB4_Pin | PB5_Pin, SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2138      	movs	r1, #56	; 0x38
 80003a8:	483c      	ldr	r0, [pc, #240]	; (800049c <display7SEGA+0x194>)
 80003aa:	f001 fc2c 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 80003ae:	e070      	b.n	8000492 <display7SEGA+0x18a>
	case 2:
		HAL_GPIO_WritePin(GPIOB, PB2_Pin | PB5_Pin, SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2124      	movs	r1, #36	; 0x24
 80003b4:	4839      	ldr	r0, [pc, #228]	; (800049c <display7SEGA+0x194>)
 80003b6:	f001 fc26 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB1_Pin | PB6_Pin, RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2143      	movs	r1, #67	; 0x43
 80003be:	4837      	ldr	r0, [pc, #220]	; (800049c <display7SEGA+0x194>)
 80003c0:	f001 fc21 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB4_Pin, RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2118      	movs	r1, #24
 80003c8:	4834      	ldr	r0, [pc, #208]	; (800049c <display7SEGA+0x194>)
 80003ca:	f001 fc1c 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 80003ce:	e060      	b.n	8000492 <display7SEGA+0x18a>
	case 3:
		HAL_GPIO_WritePin(GPIOB, PB5_Pin | PB4_Pin, SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2130      	movs	r1, #48	; 0x30
 80003d4:	4831      	ldr	r0, [pc, #196]	; (800049c <display7SEGA+0x194>)
 80003d6:	f001 fc16 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB1_Pin | PB2_Pin, RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2107      	movs	r1, #7
 80003de:	482f      	ldr	r0, [pc, #188]	; (800049c <display7SEGA+0x194>)
 80003e0:	f001 fc11 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB6_Pin, RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2148      	movs	r1, #72	; 0x48
 80003e8:	482c      	ldr	r0, [pc, #176]	; (800049c <display7SEGA+0x194>)
 80003ea:	f001 fc0c 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 80003ee:	e050      	b.n	8000492 <display7SEGA+0x18a>
	case 4:
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB4_Pin | PB3_Pin, SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2119      	movs	r1, #25
 80003f4:	4829      	ldr	r0, [pc, #164]	; (800049c <display7SEGA+0x194>)
 80003f6:	f001 fc06 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB1_Pin | PB2_Pin, RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2106      	movs	r1, #6
 80003fe:	4827      	ldr	r0, [pc, #156]	; (800049c <display7SEGA+0x194>)
 8000400:	f001 fc01 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB6_Pin | PB5_Pin, RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2160      	movs	r1, #96	; 0x60
 8000408:	4824      	ldr	r0, [pc, #144]	; (800049c <display7SEGA+0x194>)
 800040a:	f001 fbfc 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 800040e:	e040      	b.n	8000492 <display7SEGA+0x18a>
	case 5:
		HAL_GPIO_WritePin(GPIOB, PB4_Pin | PB1_Pin, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2112      	movs	r1, #18
 8000414:	4821      	ldr	r0, [pc, #132]	; (800049c <display7SEGA+0x194>)
 8000416:	f001 fbf6 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB2_Pin, RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2105      	movs	r1, #5
 800041e:	481f      	ldr	r0, [pc, #124]	; (800049c <display7SEGA+0x194>)
 8000420:	f001 fbf1 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB6_Pin | PB5_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2168      	movs	r1, #104	; 0x68
 8000428:	481c      	ldr	r0, [pc, #112]	; (800049c <display7SEGA+0x194>)
 800042a:	f001 fbec 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 800042e:	e030      	b.n	8000492 <display7SEGA+0x18a>
	case 6:
		HAL_GPIO_WritePin(GPIOB, PB1_Pin, SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2102      	movs	r1, #2
 8000434:	4819      	ldr	r0, [pc, #100]	; (800049c <display7SEGA+0x194>)
 8000436:	f001 fbe6 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB2_Pin | PB4_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2115      	movs	r1, #21
 800043e:	4817      	ldr	r0, [pc, #92]	; (800049c <display7SEGA+0x194>)
 8000440:	f001 fbe1 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB6_Pin | PB5_Pin, RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2168      	movs	r1, #104	; 0x68
 8000448:	4814      	ldr	r0, [pc, #80]	; (800049c <display7SEGA+0x194>)
 800044a:	f001 fbdc 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 800044e:	e020      	b.n	8000492 <display7SEGA+0x18a>
	case 7:
		HAL_GPIO_WritePin(GPIOB, PB6_Pin, SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4811      	ldr	r0, [pc, #68]	; (800049c <display7SEGA+0x194>)
 8000456:	f001 fbd6 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB1_Pin | PB2_Pin, RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2107      	movs	r1, #7
 800045e:	480f      	ldr	r0, [pc, #60]	; (800049c <display7SEGA+0x194>)
 8000460:	f001 fbd1 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB4_Pin | PB5_Pin, SET);
 8000464:	2201      	movs	r2, #1
 8000466:	2138      	movs	r1, #56	; 0x38
 8000468:	480c      	ldr	r0, [pc, #48]	; (800049c <display7SEGA+0x194>)
 800046a:	f001 fbcc 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 800046e:	e010      	b.n	8000492 <display7SEGA+0x18a>
	case 8:
		break;
	case 9:
		HAL_GPIO_WritePin(GPIOB, PB4_Pin, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2110      	movs	r1, #16
 8000474:	4809      	ldr	r0, [pc, #36]	; (800049c <display7SEGA+0x194>)
 8000476:	f001 fbc6 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB0_Pin | PB1_Pin | PB2_Pin, RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2107      	movs	r1, #7
 800047e:	4807      	ldr	r0, [pc, #28]	; (800049c <display7SEGA+0x194>)
 8000480:	f001 fbc1 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB3_Pin | PB6_Pin | PB5_Pin, RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2168      	movs	r1, #104	; 0x68
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <display7SEGA+0x194>)
 800048a:	f001 fbbc 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 800048e:	e000      	b.n	8000492 <display7SEGA+0x18a>
	default:
		break;
 8000490:	bf00      	nop
	}

}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40010c00 	.word	0x40010c00

080004a0 <display7SEGB>:

void display7SEGB(int index) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b09      	cmp	r3, #9
 80004ac:	f200 80c3 	bhi.w	8000636 <display7SEGB+0x196>
 80004b0:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <display7SEGB+0x18>)
 80004b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b6:	bf00      	nop
 80004b8:	080004e1 	.word	0x080004e1
 80004bc:	08000507 	.word	0x08000507
 80004c0:	0800052d 	.word	0x0800052d
 80004c4:	08000553 	.word	0x08000553
 80004c8:	08000579 	.word	0x08000579
 80004cc:	0800059f 	.word	0x0800059f
 80004d0:	080005c5 	.word	0x080005c5
 80004d4:	080005eb 	.word	0x080005eb
 80004d8:	08000637 	.word	0x08000637
 80004dc:	08000611 	.word	0x08000611


	switch (index) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, PB13_Pin, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e6:	4856      	ldr	r0, [pc, #344]	; (8000640 <display7SEGB+0x1a0>)
 80004e8:	f001 fb8d 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB8_Pin | PB9_Pin, RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 7160 	mov.w	r1, #896	; 0x380
 80004f2:	4853      	ldr	r0, [pc, #332]	; (8000640 <display7SEGB+0x1a0>)
 80004f4:	f001 fb87 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB11_Pin | PB12_Pin, RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80004fe:	4850      	ldr	r0, [pc, #320]	; (8000640 <display7SEGB+0x1a0>)
 8000500:	f001 fb81 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 8000504:	e098      	b.n	8000638 <display7SEGB+0x198>
	case 1:
		HAL_GPIO_WritePin(GPIOB, PB13_Pin | PB7_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 800050c:	484c      	ldr	r0, [pc, #304]	; (8000640 <display7SEGB+0x1a0>)
 800050e:	f001 fb7a 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB8_Pin | PB9_Pin, RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000518:	4849      	ldr	r0, [pc, #292]	; (8000640 <display7SEGB+0x1a0>)
 800051a:	f001 fb74 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB11_Pin | PB12_Pin, SET);
 800051e:	2201      	movs	r2, #1
 8000520:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000524:	4846      	ldr	r0, [pc, #280]	; (8000640 <display7SEGB+0x1a0>)
 8000526:	f001 fb6e 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 800052a:	e085      	b.n	8000638 <display7SEGB+0x198>
	case 2:
		HAL_GPIO_WritePin(GPIOB, PB9_Pin | PB12_Pin, SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000532:	4843      	ldr	r0, [pc, #268]	; (8000640 <display7SEGB+0x1a0>)
 8000534:	f001 fb67 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB8_Pin | PB13_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 5106 	mov.w	r1, #8576	; 0x2180
 800053e:	4840      	ldr	r0, [pc, #256]	; (8000640 <display7SEGB+0x1a0>)
 8000540:	f001 fb61 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB11_Pin, RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800054a:	483d      	ldr	r0, [pc, #244]	; (8000640 <display7SEGB+0x1a0>)
 800054c:	f001 fb5b 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 8000550:	e072      	b.n	8000638 <display7SEGB+0x198>
	case 3:
		HAL_GPIO_WritePin(GPIOB, PB12_Pin | PB11_Pin, SET);
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000558:	4839      	ldr	r0, [pc, #228]	; (8000640 <display7SEGB+0x1a0>)
 800055a:	f001 fb54 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB8_Pin | PB9_Pin, RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000564:	4836      	ldr	r0, [pc, #216]	; (8000640 <display7SEGB+0x1a0>)
 8000566:	f001 fb4e 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB13_Pin, RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000570:	4833      	ldr	r0, [pc, #204]	; (8000640 <display7SEGB+0x1a0>)
 8000572:	f001 fb48 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 8000576:	e05f      	b.n	8000638 <display7SEGB+0x198>
	case 4:
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB11_Pin | PB10_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 800057e:	4830      	ldr	r0, [pc, #192]	; (8000640 <display7SEGB+0x1a0>)
 8000580:	f001 fb41 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB8_Pin | PB9_Pin, RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 7140 	mov.w	r1, #768	; 0x300
 800058a:	482d      	ldr	r0, [pc, #180]	; (8000640 <display7SEGB+0x1a0>)
 800058c:	f001 fb3b 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB13_Pin | PB12_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000596:	482a      	ldr	r0, [pc, #168]	; (8000640 <display7SEGB+0x1a0>)
 8000598:	f001 fb35 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 800059c:	e04c      	b.n	8000638 <display7SEGB+0x198>
	case 5:
		HAL_GPIO_WritePin(GPIOB, PB11_Pin | PB8_Pin, SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80005a4:	4826      	ldr	r0, [pc, #152]	; (8000640 <display7SEGB+0x1a0>)
 80005a6:	f001 fb2e 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB9_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7120 	mov.w	r1, #640	; 0x280
 80005b0:	4823      	ldr	r0, [pc, #140]	; (8000640 <display7SEGB+0x1a0>)
 80005b2:	f001 fb28 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB13_Pin | PB12_Pin, RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80005bc:	4820      	ldr	r0, [pc, #128]	; (8000640 <display7SEGB+0x1a0>)
 80005be:	f001 fb22 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 80005c2:	e039      	b.n	8000638 <display7SEGB+0x198>
	case 6:
		HAL_GPIO_WritePin(GPIOB, PB8_Pin, SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ca:	481d      	ldr	r0, [pc, #116]	; (8000640 <display7SEGB+0x1a0>)
 80005cc:	f001 fb1b 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB9_Pin | PB11_Pin, RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 6128 	mov.w	r1, #2688	; 0xa80
 80005d6:	481a      	ldr	r0, [pc, #104]	; (8000640 <display7SEGB+0x1a0>)
 80005d8:	f001 fb15 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB13_Pin | PB12_Pin, RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 80005e2:	4817      	ldr	r0, [pc, #92]	; (8000640 <display7SEGB+0x1a0>)
 80005e4:	f001 fb0f 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 80005e8:	e026      	b.n	8000638 <display7SEGB+0x198>
	case 7:
		HAL_GPIO_WritePin(GPIOB, PB13_Pin, SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	4813      	ldr	r0, [pc, #76]	; (8000640 <display7SEGB+0x1a0>)
 80005f2:	f001 fb08 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB8_Pin | PB9_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7160 	mov.w	r1, #896	; 0x380
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <display7SEGB+0x1a0>)
 80005fe:	f001 fb02 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB11_Pin | PB12_Pin, SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <display7SEGB+0x1a0>)
 800060a:	f001 fafc 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 800060e:	e013      	b.n	8000638 <display7SEGB+0x198>
	case 8:

		break;
	case 9:
		HAL_GPIO_WritePin(GPIOB, PB11_Pin, SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000616:	480a      	ldr	r0, [pc, #40]	; (8000640 <display7SEGB+0x1a0>)
 8000618:	f001 faf5 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB7_Pin | PB8_Pin | PB9_Pin, RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <display7SEGB+0x1a0>)
 8000624:	f001 faef 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, PB10_Pin | PB13_Pin | PB12_Pin, RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 5150 	mov.w	r1, #13312	; 0x3400
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <display7SEGB+0x1a0>)
 8000630:	f001 fae9 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 8000634:	e000      	b.n	8000638 <display7SEGB+0x198>
	default:
		break;
 8000636:	bf00      	nop
	}

}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40010c00 	.word	0x40010c00

08000644 <update_indexA>:

void update_indexA(int index) {
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	if (index >= 10) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b09      	cmp	r3, #9
 8000650:	dd17      	ble.n	8000682 <update_indexA+0x3e>
		buffer_indexA[0] = index % 10;
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <update_indexA+0x54>)
 8000656:	fb83 2301 	smull	r2, r3, r3, r1
 800065a:	109a      	asrs	r2, r3, #2
 800065c:	17cb      	asrs	r3, r1, #31
 800065e:	1ad2      	subs	r2, r2, r3
 8000660:	4613      	mov	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	1aca      	subs	r2, r1, r3
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <update_indexA+0x58>)
 800066c:	601a      	str	r2, [r3, #0]
		buffer_indexA[1] = index / 10;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a09      	ldr	r2, [pc, #36]	; (8000698 <update_indexA+0x54>)
 8000672:	fb82 1203 	smull	r1, r2, r2, r3
 8000676:	1092      	asrs	r2, r2, #2
 8000678:	17db      	asrs	r3, r3, #31
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <update_indexA+0x58>)
 800067e:	6053      	str	r3, [r2, #4]
	} else {
		buffer_indexA[0] = index;
		buffer_indexA[1] = 0;
	}
}
 8000680:	e005      	b.n	800068e <update_indexA+0x4a>
		buffer_indexA[0] = index;
 8000682:	4a06      	ldr	r2, [pc, #24]	; (800069c <update_indexA+0x58>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6013      	str	r3, [r2, #0]
		buffer_indexA[1] = 0;
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <update_indexA+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	66666667 	.word	0x66666667
 800069c:	20000100 	.word	0x20000100

080006a0 <update_indexB>:

void update_indexB(int index) {
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	if (index >= 10) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b09      	cmp	r3, #9
 80006ac:	dd17      	ble.n	80006de <update_indexB+0x3e>
		buffer_indexB[0] = index % 10;
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <update_indexB+0x54>)
 80006b2:	fb83 2301 	smull	r2, r3, r3, r1
 80006b6:	109a      	asrs	r2, r3, #2
 80006b8:	17cb      	asrs	r3, r1, #31
 80006ba:	1ad2      	subs	r2, r2, r3
 80006bc:	4613      	mov	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	1aca      	subs	r2, r1, r3
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <update_indexB+0x58>)
 80006c8:	601a      	str	r2, [r3, #0]
		buffer_indexB[1] = index / 10;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <update_indexB+0x54>)
 80006ce:	fb82 1203 	smull	r1, r2, r2, r3
 80006d2:	1092      	asrs	r2, r2, #2
 80006d4:	17db      	asrs	r3, r3, #31
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <update_indexB+0x58>)
 80006da:	6053      	str	r3, [r2, #4]
	} else {
		buffer_indexB[0] = index;
		buffer_indexB[1] = 0;
	}
}
 80006dc:	e005      	b.n	80006ea <update_indexB+0x4a>
		buffer_indexB[0] = index;
 80006de:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <update_indexB+0x58>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6013      	str	r3, [r2, #0]
		buffer_indexB[1] = 0;
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <update_indexB+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	66666667 	.word	0x66666667
 80006f8:	200000f8 	.word	0x200000f8

080006fc <update_7seg_A>:

void update_7seg_A() {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	switch (switch_7seg) {
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <update_7seg_A+0x60>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d002      	beq.n	800070e <update_7seg_A+0x12>
 8000708:	2b02      	cmp	r3, #2
 800070a:	d012      	beq.n	8000732 <update_7seg_A+0x36>
		display7SEGA(buffer_indexA[0]);
		HAL_GPIO_WritePin(GPIOA, PA11_Pin, SET);
		HAL_GPIO_WritePin(GPIOA, PA12_Pin, RESET);
		break;
	default:
		break;
 800070c:	e023      	b.n	8000756 <update_7seg_A+0x5a>
		display7SEGA(buffer_indexA[1]);
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <update_7seg_A+0x64>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fdf8 	bl	8000308 <display7SEGA>
		HAL_GPIO_WritePin(GPIOA, PA11_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071e:	4811      	ldr	r0, [pc, #68]	; (8000764 <update_7seg_A+0x68>)
 8000720:	f001 fa71 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA12_Pin, SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <update_7seg_A+0x68>)
 800072c:	f001 fa6b 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 8000730:	e011      	b.n	8000756 <update_7seg_A+0x5a>
		display7SEGA(buffer_indexA[0]);
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <update_7seg_A+0x64>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fde6 	bl	8000308 <display7SEGA>
		HAL_GPIO_WritePin(GPIOA, PA11_Pin, SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000742:	4808      	ldr	r0, [pc, #32]	; (8000764 <update_7seg_A+0x68>)
 8000744:	f001 fa5f 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA12_Pin, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <update_7seg_A+0x68>)
 8000750:	f001 fa59 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 8000754:	bf00      	nop
	}
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000cc 	.word	0x200000cc
 8000760:	20000100 	.word	0x20000100
 8000764:	40010800 	.word	0x40010800

08000768 <update_7seg_B>:

void update_7seg_B() {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	switch (switch_7seg) {
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <update_7seg_B+0x60>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d002      	beq.n	800077a <update_7seg_B+0x12>
 8000774:	2b02      	cmp	r3, #2
 8000776:	d012      	beq.n	800079e <update_7seg_B+0x36>
		display7SEGB(buffer_indexB[0]);
		HAL_GPIO_WritePin(GPIOA, PA13_Pin, SET);
		HAL_GPIO_WritePin(GPIOA, PA14_Pin, RESET);
		break;
	default:
		break;
 8000778:	e023      	b.n	80007c2 <update_7seg_B+0x5a>
		display7SEGB(buffer_indexB[1]);
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <update_7seg_B+0x64>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fe8e 	bl	80004a0 <display7SEGB>
		HAL_GPIO_WritePin(GPIOA, PA13_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078a:	4811      	ldr	r0, [pc, #68]	; (80007d0 <update_7seg_B+0x68>)
 800078c:	f001 fa3b 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA14_Pin, SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000796:	480e      	ldr	r0, [pc, #56]	; (80007d0 <update_7seg_B+0x68>)
 8000798:	f001 fa35 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 800079c:	e011      	b.n	80007c2 <update_7seg_B+0x5a>
		display7SEGB(buffer_indexB[0]);
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <update_7seg_B+0x64>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fe7c 	bl	80004a0 <display7SEGB>
		HAL_GPIO_WritePin(GPIOA, PA13_Pin, SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ae:	4808      	ldr	r0, [pc, #32]	; (80007d0 <update_7seg_B+0x68>)
 80007b0:	f001 fa29 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA14_Pin, RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <update_7seg_B+0x68>)
 80007bc:	f001 fa23 	bl	8001c06 <HAL_GPIO_WritePin>
		break;
 80007c0:	bf00      	nop
	}
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000cc 	.word	0x200000cc
 80007cc:	200000f8 	.word	0x200000f8
 80007d0:	40010800 	.word	0x40010800

080007d4 <displayTraffic>:
int status_RED_B = 0;
int status_GREEN_B = 1;
int status_YELLOW_B = 0;


void displayTraffic() {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	//group a
	if (status_RED_A == 1) {
 80007d8:	4b3e      	ldr	r3, [pc, #248]	; (80008d4 <displayTraffic+0x100>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d10e      	bne.n	80007fe <displayTraffic+0x2a>
		HAL_GPIO_WritePin(GPIOA, PA5_Pin, SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2120      	movs	r1, #32
 80007e4:	483c      	ldr	r0, [pc, #240]	; (80008d8 <displayTraffic+0x104>)
 80007e6:	f001 fa0e 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA6_Pin, RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2140      	movs	r1, #64	; 0x40
 80007ee:	483a      	ldr	r0, [pc, #232]	; (80008d8 <displayTraffic+0x104>)
 80007f0:	f001 fa09 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA7_Pin, RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	4837      	ldr	r0, [pc, #220]	; (80008d8 <displayTraffic+0x104>)
 80007fa:	f001 fa04 	bl	8001c06 <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_A == 1) {
 80007fe:	4b37      	ldr	r3, [pc, #220]	; (80008dc <displayTraffic+0x108>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d10e      	bne.n	8000824 <displayTraffic+0x50>
		HAL_GPIO_WritePin(GPIOA, PA5_Pin, RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2120      	movs	r1, #32
 800080a:	4833      	ldr	r0, [pc, #204]	; (80008d8 <displayTraffic+0x104>)
 800080c:	f001 f9fb 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA6_Pin, SET);
 8000810:	2201      	movs	r2, #1
 8000812:	2140      	movs	r1, #64	; 0x40
 8000814:	4830      	ldr	r0, [pc, #192]	; (80008d8 <displayTraffic+0x104>)
 8000816:	f001 f9f6 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA7_Pin, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	482e      	ldr	r0, [pc, #184]	; (80008d8 <displayTraffic+0x104>)
 8000820:	f001 f9f1 	bl	8001c06 <HAL_GPIO_WritePin>
	}
	if (status_GREEN_A == 1) {
 8000824:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <displayTraffic+0x10c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d10e      	bne.n	800084a <displayTraffic+0x76>
		HAL_GPIO_WritePin(GPIOA, PA5_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2120      	movs	r1, #32
 8000830:	4829      	ldr	r0, [pc, #164]	; (80008d8 <displayTraffic+0x104>)
 8000832:	f001 f9e8 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA6_Pin, RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	4827      	ldr	r0, [pc, #156]	; (80008d8 <displayTraffic+0x104>)
 800083c:	f001 f9e3 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA7_Pin, SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	4824      	ldr	r0, [pc, #144]	; (80008d8 <displayTraffic+0x104>)
 8000846:	f001 f9de 	bl	8001c06 <HAL_GPIO_WritePin>
	}
	//group b
	if (status_RED_B == 1) {
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <displayTraffic+0x110>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d111      	bne.n	8000876 <displayTraffic+0xa2>
		HAL_GPIO_WritePin(GPIOA, PA8_Pin, SET);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000858:	481f      	ldr	r0, [pc, #124]	; (80008d8 <displayTraffic+0x104>)
 800085a:	f001 f9d4 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA9_Pin, RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000864:	481c      	ldr	r0, [pc, #112]	; (80008d8 <displayTraffic+0x104>)
 8000866:	f001 f9ce 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA10_Pin, RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000870:	4819      	ldr	r0, [pc, #100]	; (80008d8 <displayTraffic+0x104>)
 8000872:	f001 f9c8 	bl	8001c06 <HAL_GPIO_WritePin>
	}
	if (status_YELLOW_B == 1) {
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <displayTraffic+0x114>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d111      	bne.n	80008a2 <displayTraffic+0xce>
		HAL_GPIO_WritePin(GPIOA, PA8_Pin, RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000884:	4814      	ldr	r0, [pc, #80]	; (80008d8 <displayTraffic+0x104>)
 8000886:	f001 f9be 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA9_Pin, SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000890:	4811      	ldr	r0, [pc, #68]	; (80008d8 <displayTraffic+0x104>)
 8000892:	f001 f9b8 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA10_Pin, RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089c:	480e      	ldr	r0, [pc, #56]	; (80008d8 <displayTraffic+0x104>)
 800089e:	f001 f9b2 	bl	8001c06 <HAL_GPIO_WritePin>
	}
	if (status_GREEN_B == 1) {
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <displayTraffic+0x118>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d111      	bne.n	80008ce <displayTraffic+0xfa>
		HAL_GPIO_WritePin(GPIOA, PA8_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <displayTraffic+0x104>)
 80008b2:	f001 f9a8 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA9_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <displayTraffic+0x104>)
 80008be:	f001 f9a2 	bl	8001c06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PA10_Pin, SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <displayTraffic+0x104>)
 80008ca:	f001 f99c 	bl	8001c06 <HAL_GPIO_WritePin>
	}
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000064 	.word	0x20000064
 80008d8:	40010800 	.word	0x40010800
 80008dc:	200000b0 	.word	0x200000b0
 80008e0:	200000ac 	.word	0x200000ac
 80008e4:	200000b4 	.word	0x200000b4
 80008e8:	200000b8 	.word	0x200000b8
 80008ec:	20000068 	.word	0x20000068

080008f0 <fsm_7segA>:
int count_RED = 5 ;
int count_GREEN = 3 ;
int count_YELLOW = 2 ;


void fsm_7segA() {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	switch (status_A) {
 80008f4:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <fsm_7segA+0xf0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	3b0b      	subs	r3, #11
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d867      	bhi.n	80009ce <fsm_7segA+0xde>
 80008fe:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <fsm_7segA+0x14>)
 8000900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000904:	08000915 	.word	0x08000915
 8000908:	08000927 	.word	0x08000927
 800090c:	08000997 	.word	0x08000997
 8000910:	0800095f 	.word	0x0800095f
	case INIT:
		status_A = AUTO_RED;
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <fsm_7segA+0xf0>)
 8000916:	220c      	movs	r2, #12
 8000918:	601a      	str	r2, [r3, #0]
		setTimer(5, 1000);
 800091a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800091e:	2005      	movs	r0, #5
 8000920:	f000 fc6a 	bl	80011f8 <setTimer>
		break;
 8000924:	e05a      	b.n	80009dc <fsm_7segA+0xec>
	case AUTO_RED:
		if (countDownA <= 0) {
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <fsm_7segA+0xf4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	dc03      	bgt.n	8000936 <fsm_7segA+0x46>
			countDownA = count_GREEN;
 800092e:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <fsm_7segA+0xf8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <fsm_7segA+0xf4>)
 8000934:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[5] == 1) {
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <fsm_7segA+0xfc>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d149      	bne.n	80009d2 <fsm_7segA+0xe2>
			update_indexA(countDownA);
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <fsm_7segA+0xf4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fe7e 	bl	8000644 <update_indexA>
			countDownA--;
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <fsm_7segA+0xf4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3b01      	subs	r3, #1
 800094e:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <fsm_7segA+0xf4>)
 8000950:	6013      	str	r3, [r2, #0]
			setTimer(5, 1000);
 8000952:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000956:	2005      	movs	r0, #5
 8000958:	f000 fc4e 	bl	80011f8 <setTimer>
		}
		break;
 800095c:	e039      	b.n	80009d2 <fsm_7segA+0xe2>
	case AUTO_GREEN:
		if (countDownA <= 0) {
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <fsm_7segA+0xf4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	dc03      	bgt.n	800096e <fsm_7segA+0x7e>
			countDownA = count_YELLOW;
 8000966:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <fsm_7segA+0x100>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <fsm_7segA+0xf4>)
 800096c:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[5] == 1) {
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <fsm_7segA+0xfc>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d12f      	bne.n	80009d6 <fsm_7segA+0xe6>
			update_indexA(countDownA);
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <fsm_7segA+0xf4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fe62 	bl	8000644 <update_indexA>
			countDownA--;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <fsm_7segA+0xf4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3b01      	subs	r3, #1
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <fsm_7segA+0xf4>)
 8000988:	6013      	str	r3, [r2, #0]
			setTimer(5, 1000);
 800098a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800098e:	2005      	movs	r0, #5
 8000990:	f000 fc32 	bl	80011f8 <setTimer>
		}
		break;
 8000994:	e01f      	b.n	80009d6 <fsm_7segA+0xe6>
	case AUTO_YELLOW:
		if (countDownA <= 0) {
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <fsm_7segA+0xf4>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	dc03      	bgt.n	80009a6 <fsm_7segA+0xb6>
			countDownA = count_RED;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <fsm_7segA+0x104>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <fsm_7segA+0xf4>)
 80009a4:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[5] == 1) {
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <fsm_7segA+0xfc>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d115      	bne.n	80009da <fsm_7segA+0xea>
			update_indexA(countDownA);
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <fsm_7segA+0xf4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe46 	bl	8000644 <update_indexA>
			countDownA--;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <fsm_7segA+0xf4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3b01      	subs	r3, #1
 80009be:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <fsm_7segA+0xf4>)
 80009c0:	6013      	str	r3, [r2, #0]
			setTimer(5, 1000);
 80009c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009c6:	2005      	movs	r0, #5
 80009c8:	f000 fc16 	bl	80011f8 <setTimer>
		}
		break;
 80009cc:	e005      	b.n	80009da <fsm_7segA+0xea>

	default:
		break;
 80009ce:	bf00      	nop
 80009d0:	e004      	b.n	80009dc <fsm_7segA+0xec>
		break;
 80009d2:	bf00      	nop
 80009d4:	e002      	b.n	80009dc <fsm_7segA+0xec>
		break;
 80009d6:	bf00      	nop
 80009d8:	e000      	b.n	80009dc <fsm_7segA+0xec>
		break;
 80009da:	bf00      	nop
	}

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000c0 	.word	0x200000c0
 80009e4:	20000108 	.word	0x20000108
 80009e8:	20000070 	.word	0x20000070
 80009ec:	20000180 	.word	0x20000180
 80009f0:	20000074 	.word	0x20000074
 80009f4:	2000006c 	.word	0x2000006c

080009f8 <fsm_7segB>:

void fsm_7segB() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	switch (status_B) {
 80009fc:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <fsm_7segB+0xf0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3b0b      	subs	r3, #11
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d867      	bhi.n	8000ad6 <fsm_7segB+0xde>
 8000a06:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <fsm_7segB+0x14>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a1d 	.word	0x08000a1d
 8000a10:	08000a9f 	.word	0x08000a9f
 8000a14:	08000a67 	.word	0x08000a67
 8000a18:	08000a2f 	.word	0x08000a2f
	case INIT:
		status_B = AUTO_GREEN;
 8000a1c:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <fsm_7segB+0xf0>)
 8000a1e:	220e      	movs	r2, #14
 8000a20:	601a      	str	r2, [r3, #0]
		setTimer(6, 1000);
 8000a22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a26:	2006      	movs	r0, #6
 8000a28:	f000 fbe6 	bl	80011f8 <setTimer>
		break;
 8000a2c:	e05a      	b.n	8000ae4 <fsm_7segB+0xec>
	case AUTO_GREEN:
		if (countDownB <= 0) {
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <fsm_7segB+0xf4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	dc03      	bgt.n	8000a3e <fsm_7segB+0x46>
			countDownB = count_YELLOW;
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <fsm_7segB+0xf8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a2c      	ldr	r2, [pc, #176]	; (8000aec <fsm_7segB+0xf4>)
 8000a3c:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[6] == 1) {
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <fsm_7segB+0xfc>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d149      	bne.n	8000ada <fsm_7segB+0xe2>
			update_indexB(countDownB);
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <fsm_7segB+0xf4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fe28 	bl	80006a0 <update_indexB>
			countDownB--;
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <fsm_7segB+0xf4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	4a25      	ldr	r2, [pc, #148]	; (8000aec <fsm_7segB+0xf4>)
 8000a58:	6013      	str	r3, [r2, #0]
			setTimer(6, 1000);
 8000a5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a5e:	2006      	movs	r0, #6
 8000a60:	f000 fbca 	bl	80011f8 <setTimer>
		}
		break;
 8000a64:	e039      	b.n	8000ada <fsm_7segB+0xe2>
	case AUTO_YELLOW:
		if (countDownB <= 0) {
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <fsm_7segB+0xf4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	dc03      	bgt.n	8000a76 <fsm_7segB+0x7e>
			countDownB = count_RED;
 8000a6e:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <fsm_7segB+0x100>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <fsm_7segB+0xf4>)
 8000a74:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[6] == 1) {
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <fsm_7segB+0xfc>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d12f      	bne.n	8000ade <fsm_7segB+0xe6>
			update_indexB(countDownB);
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <fsm_7segB+0xf4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fe0c 	bl	80006a0 <update_indexB>
			countDownB--;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <fsm_7segB+0xf4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <fsm_7segB+0xf4>)
 8000a90:	6013      	str	r3, [r2, #0]
			setTimer(6, 1000);
 8000a92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a96:	2006      	movs	r0, #6
 8000a98:	f000 fbae 	bl	80011f8 <setTimer>
		}
		break;
 8000a9c:	e01f      	b.n	8000ade <fsm_7segB+0xe6>
	case AUTO_RED:
		if (countDownB <= 0) {
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <fsm_7segB+0xf4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	dc03      	bgt.n	8000aae <fsm_7segB+0xb6>
			countDownB = count_GREEN;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <fsm_7segB+0x104>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a10      	ldr	r2, [pc, #64]	; (8000aec <fsm_7segB+0xf4>)
 8000aac:	6013      	str	r3, [r2, #0]
		}
		if (timer_flag[6] == 1) {
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <fsm_7segB+0xfc>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d115      	bne.n	8000ae2 <fsm_7segB+0xea>
			update_indexB(countDownB);
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <fsm_7segB+0xf4>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fdf0 	bl	80006a0 <update_indexB>
			countDownB--;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <fsm_7segB+0xf4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	4a09      	ldr	r2, [pc, #36]	; (8000aec <fsm_7segB+0xf4>)
 8000ac8:	6013      	str	r3, [r2, #0]
			setTimer(6, 1000);
 8000aca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f000 fb92 	bl	80011f8 <setTimer>
		}
		break;
 8000ad4:	e005      	b.n	8000ae2 <fsm_7segB+0xea>
	default:
		break;
 8000ad6:	bf00      	nop
 8000ad8:	e004      	b.n	8000ae4 <fsm_7segB+0xec>
		break;
 8000ada:	bf00      	nop
 8000adc:	e002      	b.n	8000ae4 <fsm_7segB+0xec>
		break;
 8000ade:	bf00      	nop
 8000ae0:	e000      	b.n	8000ae4 <fsm_7segB+0xec>
		break;
 8000ae2:	bf00      	nop
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000c4 	.word	0x200000c4
 8000aec:	2000010c 	.word	0x2000010c
 8000af0:	20000074 	.word	0x20000074
 8000af4:	20000180 	.word	0x20000180
 8000af8:	2000006c 	.word	0x2000006c
 8000afc:	20000070 	.word	0x20000070

08000b00 <fsm_7seg_run>:

void fsm_7seg_run() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	fsm_7segA();
 8000b04:	f7ff fef4 	bl	80008f0 <fsm_7segA>
	fsm_7segB();
 8000b08:	f7ff ff76 	bl	80009f8 <fsm_7segB>
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <fsm_automatic_run_A>:
int RED_Timer = 5000;
int YELLOW_Timer = 2000;
int GREEN_Timer = 3000;


void fsm_automatic_run_A(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	status_LED_A();
 8000b14:	f000 fc74 	bl	8001400 <status_LED_A>
	switch (status_A) {
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <fsm_automatic_run_A+0xb0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3b0b      	subs	r3, #11
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d844      	bhi.n	8000bac <fsm_automatic_run_A+0x9c>
 8000b22:	a201      	add	r2, pc, #4	; (adr r2, 8000b28 <fsm_automatic_run_A+0x18>)
 8000b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b28:	08000b39 	.word	0x08000b39
 8000b2c:	08000b4d 	.word	0x08000b4d
 8000b30:	08000b8d 	.word	0x08000b8d
 8000b34:	08000b6d 	.word	0x08000b6d
		case INIT:
			status_A = AUTO_RED;
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <fsm_automatic_run_A+0xb0>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
			setTimer(1, RED_Timer);
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <fsm_automatic_run_A+0xb4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4619      	mov	r1, r3
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fb57 	bl	80011f8 <setTimer>
			break;
 8000b4a:	e036      	b.n	8000bba <fsm_automatic_run_A+0xaa>
		case AUTO_RED:
			displayTraffic();
 8000b4c:	f7ff fe42 	bl	80007d4 <displayTraffic>
			if (timer_flag[1] == 1) {
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <fsm_automatic_run_A+0xb8>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d12b      	bne.n	8000bb0 <fsm_automatic_run_A+0xa0>
				status_A = AUTO_GREEN;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <fsm_automatic_run_A+0xb0>)
 8000b5a:	220e      	movs	r2, #14
 8000b5c:	601a      	str	r2, [r3, #0]
				setTimer(1, GREEN_Timer);
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <fsm_automatic_run_A+0xbc>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4619      	mov	r1, r3
 8000b64:	2001      	movs	r0, #1
 8000b66:	f000 fb47 	bl	80011f8 <setTimer>
			}
			break;
 8000b6a:	e021      	b.n	8000bb0 <fsm_automatic_run_A+0xa0>
		case AUTO_GREEN:
			displayTraffic();
 8000b6c:	f7ff fe32 	bl	80007d4 <displayTraffic>
			if (timer_flag[1] == 1) {
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <fsm_automatic_run_A+0xb8>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d11d      	bne.n	8000bb4 <fsm_automatic_run_A+0xa4>
				status_A = AUTO_YELLOW;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <fsm_automatic_run_A+0xb0>)
 8000b7a:	220d      	movs	r2, #13
 8000b7c:	601a      	str	r2, [r3, #0]
				setTimer(1, YELLOW_Timer);
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <fsm_automatic_run_A+0xc0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 fb37 	bl	80011f8 <setTimer>
			}

			break;
 8000b8a:	e013      	b.n	8000bb4 <fsm_automatic_run_A+0xa4>
		case AUTO_YELLOW:
			displayTraffic();
 8000b8c:	f7ff fe22 	bl	80007d4 <displayTraffic>
			if (timer_flag[1] == 1) {
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <fsm_automatic_run_A+0xb8>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d10f      	bne.n	8000bb8 <fsm_automatic_run_A+0xa8>
				status_A = AUTO_RED;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <fsm_automatic_run_A+0xb0>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
				setTimer(1, RED_Timer);
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <fsm_automatic_run_A+0xb4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f000 fb27 	bl	80011f8 <setTimer>
			}
			break;
 8000baa:	e005      	b.n	8000bb8 <fsm_automatic_run_A+0xa8>
		default:
			break;
 8000bac:	bf00      	nop
 8000bae:	e004      	b.n	8000bba <fsm_automatic_run_A+0xaa>
			break;
 8000bb0:	bf00      	nop
 8000bb2:	e002      	b.n	8000bba <fsm_automatic_run_A+0xaa>
			break;
 8000bb4:	bf00      	nop
 8000bb6:	e000      	b.n	8000bba <fsm_automatic_run_A+0xaa>
			break;
 8000bb8:	bf00      	nop
		}
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200000c0 	.word	0x200000c0
 8000bc4:	20000078 	.word	0x20000078
 8000bc8:	20000180 	.word	0x20000180
 8000bcc:	20000080 	.word	0x20000080
 8000bd0:	2000007c 	.word	0x2000007c

08000bd4 <fsm_automatic_run_B>:

void fsm_automatic_run_B(){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	status_LED_B();
 8000bd8:	f000 fc80 	bl	80014dc <status_LED_B>
	switch (status_B) {
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <fsm_automatic_run_B+0xb0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3b0b      	subs	r3, #11
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d844      	bhi.n	8000c70 <fsm_automatic_run_B+0x9c>
 8000be6:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <fsm_automatic_run_B+0x18>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000bfd 	.word	0x08000bfd
 8000bf0:	08000c51 	.word	0x08000c51
 8000bf4:	08000c31 	.word	0x08000c31
 8000bf8:	08000c11 	.word	0x08000c11
		case INIT:
			status_B = AUTO_GREEN;
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <fsm_automatic_run_B+0xb0>)
 8000bfe:	220e      	movs	r2, #14
 8000c00:	601a      	str	r2, [r3, #0]
			setTimer(2, GREEN_Timer);
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <fsm_automatic_run_B+0xb4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4619      	mov	r1, r3
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f000 faf5 	bl	80011f8 <setTimer>
			break;
 8000c0e:	e036      	b.n	8000c7e <fsm_automatic_run_B+0xaa>
		case AUTO_GREEN:
			displayTraffic();
 8000c10:	f7ff fde0 	bl	80007d4 <displayTraffic>
			if (timer_flag[2] == 1) {
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <fsm_automatic_run_B+0xb8>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d12b      	bne.n	8000c74 <fsm_automatic_run_B+0xa0>
				status_B = AUTO_YELLOW;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <fsm_automatic_run_B+0xb0>)
 8000c1e:	220d      	movs	r2, #13
 8000c20:	601a      	str	r2, [r3, #0]
				setTimer(2, YELLOW_Timer);
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <fsm_automatic_run_B+0xbc>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4619      	mov	r1, r3
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f000 fae5 	bl	80011f8 <setTimer>
			}

			break;
 8000c2e:	e021      	b.n	8000c74 <fsm_automatic_run_B+0xa0>
		case AUTO_YELLOW:
			displayTraffic();
 8000c30:	f7ff fdd0 	bl	80007d4 <displayTraffic>
			if (timer_flag[2] == 1) {
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <fsm_automatic_run_B+0xb8>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d11d      	bne.n	8000c78 <fsm_automatic_run_B+0xa4>
				status_B = AUTO_RED;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <fsm_automatic_run_B+0xb0>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
				setTimer(2, RED_Timer);
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <fsm_automatic_run_B+0xc0>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4619      	mov	r1, r3
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f000 fad5 	bl	80011f8 <setTimer>
			}

			break;
 8000c4e:	e013      	b.n	8000c78 <fsm_automatic_run_B+0xa4>
		case AUTO_RED:
			displayTraffic();
 8000c50:	f7ff fdc0 	bl	80007d4 <displayTraffic>
			if (timer_flag[2] == 1) {
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <fsm_automatic_run_B+0xb8>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d10f      	bne.n	8000c7c <fsm_automatic_run_B+0xa8>
				status_B = AUTO_GREEN;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <fsm_automatic_run_B+0xb0>)
 8000c5e:	220e      	movs	r2, #14
 8000c60:	601a      	str	r2, [r3, #0]
				setTimer(2, GREEN_Timer);
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <fsm_automatic_run_B+0xb4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4619      	mov	r1, r3
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f000 fac5 	bl	80011f8 <setTimer>
			}

			break;
 8000c6e:	e005      	b.n	8000c7c <fsm_automatic_run_B+0xa8>
		default:
			break;
 8000c70:	bf00      	nop
 8000c72:	e004      	b.n	8000c7e <fsm_automatic_run_B+0xaa>
			break;
 8000c74:	bf00      	nop
 8000c76:	e002      	b.n	8000c7e <fsm_automatic_run_B+0xaa>
			break;
 8000c78:	bf00      	nop
 8000c7a:	e000      	b.n	8000c7e <fsm_automatic_run_B+0xaa>
			break;
 8000c7c:	bf00      	nop
		}
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000c4 	.word	0x200000c4
 8000c88:	20000080 	.word	0x20000080
 8000c8c:	20000180 	.word	0x20000180
 8000c90:	2000007c 	.word	0x2000007c
 8000c94:	20000078 	.word	0x20000078

08000c98 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	fsm_automatic_run_A();
 8000c9c:	f7ff ff38 	bl	8000b10 <fsm_automatic_run_A>
	fsm_automatic_run_B();
 8000ca0:	f7ff ff98 	bl	8000bd4 <fsm_automatic_run_B>
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <fsm_manual_run_A>:
 */

#include "fsm_manual.h"


void fsm_manual_run_A() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	status_LED_A();
 8000cac:	f000 fba8 	bl	8001400 <status_LED_A>
	switch (status_A) {
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <fsm_manual_run_A+0x54>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b18      	cmp	r3, #24
 8000cb6:	d00e      	beq.n	8000cd6 <fsm_manual_run_A+0x2e>
 8000cb8:	2b18      	cmp	r3, #24
 8000cba:	dc1c      	bgt.n	8000cf6 <fsm_manual_run_A+0x4e>
 8000cbc:	2b16      	cmp	r3, #22
 8000cbe:	d002      	beq.n	8000cc6 <fsm_manual_run_A+0x1e>
 8000cc0:	2b17      	cmp	r3, #23
 8000cc2:	d010      	beq.n	8000ce6 <fsm_manual_run_A+0x3e>
	case MAN_YELLOW:
		displayTraffic();
		update_indexA(count_YELLOW);
		break;
	default:
		break;
 8000cc4:	e017      	b.n	8000cf6 <fsm_manual_run_A+0x4e>
		displayTraffic();
 8000cc6:	f7ff fd85 	bl	80007d4 <displayTraffic>
		update_indexA(count_RED);
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <fsm_manual_run_A+0x58>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fcb8 	bl	8000644 <update_indexA>
		break;
 8000cd4:	e010      	b.n	8000cf8 <fsm_manual_run_A+0x50>
		displayTraffic();
 8000cd6:	f7ff fd7d 	bl	80007d4 <displayTraffic>
		update_indexA(count_GREEN);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <fsm_manual_run_A+0x5c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fcb0 	bl	8000644 <update_indexA>
		break;
 8000ce4:	e008      	b.n	8000cf8 <fsm_manual_run_A+0x50>
		displayTraffic();
 8000ce6:	f7ff fd75 	bl	80007d4 <displayTraffic>
		update_indexA(count_YELLOW);
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <fsm_manual_run_A+0x60>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fca8 	bl	8000644 <update_indexA>
		break;
 8000cf4:	e000      	b.n	8000cf8 <fsm_manual_run_A+0x50>
		break;
 8000cf6:	bf00      	nop
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200000c0 	.word	0x200000c0
 8000d00:	2000006c 	.word	0x2000006c
 8000d04:	20000070 	.word	0x20000070
 8000d08:	20000074 	.word	0x20000074

08000d0c <fsm_manual_run_B>:
void fsm_manual_run_B() {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	status_LED_B();
 8000d10:	f000 fbe4 	bl	80014dc <status_LED_B>
	switch (status_B) {
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <fsm_manual_run_B+0x48>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b18      	cmp	r3, #24
 8000d1a:	d00c      	beq.n	8000d36 <fsm_manual_run_B+0x2a>
 8000d1c:	2b18      	cmp	r3, #24
 8000d1e:	dc16      	bgt.n	8000d4e <fsm_manual_run_B+0x42>
 8000d20:	2b16      	cmp	r3, #22
 8000d22:	d002      	beq.n	8000d2a <fsm_manual_run_B+0x1e>
 8000d24:	2b17      	cmp	r3, #23
 8000d26:	d00c      	beq.n	8000d42 <fsm_manual_run_B+0x36>
	case MAN_YELLOW:
		displayTraffic();
		update_indexB(MODE3);
		break;
	default:
		break;
 8000d28:	e011      	b.n	8000d4e <fsm_manual_run_B+0x42>
		displayTraffic();
 8000d2a:	f7ff fd53 	bl	80007d4 <displayTraffic>
		update_indexB(MODE2);
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f7ff fcb6 	bl	80006a0 <update_indexB>
		break;
 8000d34:	e00c      	b.n	8000d50 <fsm_manual_run_B+0x44>
		displayTraffic();
 8000d36:	f7ff fd4d 	bl	80007d4 <displayTraffic>
		update_indexB(MODE4);
 8000d3a:	2004      	movs	r0, #4
 8000d3c:	f7ff fcb0 	bl	80006a0 <update_indexB>
		break;
 8000d40:	e006      	b.n	8000d50 <fsm_manual_run_B+0x44>
		displayTraffic();
 8000d42:	f7ff fd47 	bl	80007d4 <displayTraffic>
		update_indexB(MODE3);
 8000d46:	2003      	movs	r0, #3
 8000d48:	f7ff fcaa 	bl	80006a0 <update_indexB>
		break;
 8000d4c:	e000      	b.n	8000d50 <fsm_manual_run_B+0x44>
		break;
 8000d4e:	bf00      	nop
	}
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200000c4 	.word	0x200000c4

08000d58 <fsm_manual_run>:

void fsm_manual_run() {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
fsm_manual_run_A();
 8000d5c:	f7ff ffa4 	bl	8000ca8 <fsm_manual_run_A>
fsm_manual_run_B();
 8000d60:	f7ff ffd4 	bl	8000d0c <fsm_manual_run_B>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <countPressButton1>:



int countTemp = 0 ;

void countPressButton1(){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	if(IsButtonPress(1) == 1){
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff f9ed 	bl	800014c <IsButtonPress>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d104      	bne.n	8000d82 <countPressButton1+0x1a>
		status_mode++;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <countPressButton1+0x2c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <countPressButton1+0x2c>)
 8000d80:	6013      	str	r3, [r2, #0]
	}
	if(status_mode == MODE4 + 1){
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <countPressButton1+0x2c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b05      	cmp	r3, #5
 8000d88:	d102      	bne.n	8000d90 <countPressButton1+0x28>
		status_mode = MODE0;
 8000d8a:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <countPressButton1+0x2c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
	}
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200000c8 	.word	0x200000c8

08000d98 <fsm_mode>:

void fsm_mode(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	countPressButton1();
 8000d9c:	f7ff ffe4 	bl	8000d68 <countPressButton1>
	switch(status_mode){
 8000da0:	4b6e      	ldr	r3, [pc, #440]	; (8000f5c <fsm_mode+0x1c4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	f200 80cd 	bhi.w	8000f44 <fsm_mode+0x1ac>
 8000daa:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <fsm_mode+0x18>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000dc5 	.word	0x08000dc5
 8000db4:	08000de9 	.word	0x08000de9
 8000db8:	08000dff 	.word	0x08000dff
 8000dbc:	08000e6d 	.word	0x08000e6d
 8000dc0:	08000ed9 	.word	0x08000ed9
	case MODE0:
		status_mode = MODE1;
 8000dc4:	4b65      	ldr	r3, [pc, #404]	; (8000f5c <fsm_mode+0x1c4>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
		status_A = INIT;
 8000dca:	4b65      	ldr	r3, [pc, #404]	; (8000f60 <fsm_mode+0x1c8>)
 8000dcc:	220b      	movs	r2, #11
 8000dce:	601a      	str	r2, [r3, #0]
		status_B = INIT;
 8000dd0:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <fsm_mode+0x1cc>)
 8000dd2:	220b      	movs	r2, #11
 8000dd4:	601a      	str	r2, [r3, #0]
		countDownA=count_RED;
 8000dd6:	4b64      	ldr	r3, [pc, #400]	; (8000f68 <fsm_mode+0x1d0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a64      	ldr	r2, [pc, #400]	; (8000f6c <fsm_mode+0x1d4>)
 8000ddc:	6013      	str	r3, [r2, #0]
		countDownB=count_GREEN;
 8000dde:	4b64      	ldr	r3, [pc, #400]	; (8000f70 <fsm_mode+0x1d8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a64      	ldr	r2, [pc, #400]	; (8000f74 <fsm_mode+0x1dc>)
 8000de4:	6013      	str	r3, [r2, #0]
		break;
 8000de6:	e0b6      	b.n	8000f56 <fsm_mode+0x1be>
	case MODE1:
		if(IsButtonPress(1) == 1){
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff f9af 	bl	800014c <IsButtonPress>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	f040 80a9 	bne.w	8000f48 <fsm_mode+0x1b0>
			status_mode = MODE2;
 8000df6:	4b59      	ldr	r3, [pc, #356]	; (8000f5c <fsm_mode+0x1c4>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	601a      	str	r2, [r3, #0]
		}
		break;
 8000dfc:	e0a4      	b.n	8000f48 <fsm_mode+0x1b0>
	case MODE2:
		status_A = MAN_RED;
 8000dfe:	4b58      	ldr	r3, [pc, #352]	; (8000f60 <fsm_mode+0x1c8>)
 8000e00:	2216      	movs	r2, #22
 8000e02:	601a      	str	r2, [r3, #0]
		status_B = MAN_RED;
 8000e04:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <fsm_mode+0x1cc>)
 8000e06:	2216      	movs	r2, #22
 8000e08:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(1) == 1){
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff f99e 	bl	800014c <IsButtonPress>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d102      	bne.n	8000e1c <fsm_mode+0x84>
			status_mode = MODE3;
 8000e16:	4b51      	ldr	r3, [pc, #324]	; (8000f5c <fsm_mode+0x1c4>)
 8000e18:	2203      	movs	r2, #3
 8000e1a:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(2) == 1){
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff f995 	bl	800014c <IsButtonPress>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d104      	bne.n	8000e32 <fsm_mode+0x9a>
			// add value
			countTemp+=2;
 8000e28:	4b53      	ldr	r3, [pc, #332]	; (8000f78 <fsm_mode+0x1e0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	4a52      	ldr	r2, [pc, #328]	; (8000f78 <fsm_mode+0x1e0>)
 8000e30:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(3) == 1){
 8000e32:	2003      	movs	r0, #3
 8000e34:	f7ff f98a 	bl	800014c <IsButtonPress>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	f040 8086 	bne.w	8000f4c <fsm_mode+0x1b4>
			//set value
			RED_Timer = RED_Timer + countTemp*1000;
 8000e40:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <fsm_mode+0x1e0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e48:	fb02 f203 	mul.w	r2, r2, r3
 8000e4c:	4b4b      	ldr	r3, [pc, #300]	; (8000f7c <fsm_mode+0x1e4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a4a      	ldr	r2, [pc, #296]	; (8000f7c <fsm_mode+0x1e4>)
 8000e54:	6013      	str	r3, [r2, #0]
			count_RED += countTemp;
 8000e56:	4b44      	ldr	r3, [pc, #272]	; (8000f68 <fsm_mode+0x1d0>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b47      	ldr	r3, [pc, #284]	; (8000f78 <fsm_mode+0x1e0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a41      	ldr	r2, [pc, #260]	; (8000f68 <fsm_mode+0x1d0>)
 8000e62:	6013      	str	r3, [r2, #0]
			countTemp=0;
 8000e64:	4b44      	ldr	r3, [pc, #272]	; (8000f78 <fsm_mode+0x1e0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e6a:	e06f      	b.n	8000f4c <fsm_mode+0x1b4>
	case MODE3:
		status_A = MAN_YELLOW;
 8000e6c:	4b3c      	ldr	r3, [pc, #240]	; (8000f60 <fsm_mode+0x1c8>)
 8000e6e:	2217      	movs	r2, #23
 8000e70:	601a      	str	r2, [r3, #0]
		status_B = MAN_YELLOW;
 8000e72:	4b3c      	ldr	r3, [pc, #240]	; (8000f64 <fsm_mode+0x1cc>)
 8000e74:	2217      	movs	r2, #23
 8000e76:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(1) == 1){
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f7ff f967 	bl	800014c <IsButtonPress>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d102      	bne.n	8000e8a <fsm_mode+0xf2>
			status_mode = MODE4;
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <fsm_mode+0x1c4>)
 8000e86:	2204      	movs	r2, #4
 8000e88:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(2) == 1){
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f7ff f95e 	bl	800014c <IsButtonPress>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d104      	bne.n	8000ea0 <fsm_mode+0x108>
			// add value
			countTemp+=2;
 8000e96:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <fsm_mode+0x1e0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	4a36      	ldr	r2, [pc, #216]	; (8000f78 <fsm_mode+0x1e0>)
 8000e9e:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(3) == 1){
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f7ff f953 	bl	800014c <IsButtonPress>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d151      	bne.n	8000f50 <fsm_mode+0x1b8>
			//set value
			YELLOW_Timer = YELLOW_Timer + countTemp*1000;
 8000eac:	4b32      	ldr	r3, [pc, #200]	; (8000f78 <fsm_mode+0x1e0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb4:	fb02 f203 	mul.w	r2, r2, r3
 8000eb8:	4b31      	ldr	r3, [pc, #196]	; (8000f80 <fsm_mode+0x1e8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <fsm_mode+0x1e8>)
 8000ec0:	6013      	str	r3, [r2, #0]
			count_YELLOW += countTemp;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <fsm_mode+0x1ec>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <fsm_mode+0x1e0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <fsm_mode+0x1ec>)
 8000ece:	6013      	str	r3, [r2, #0]
			countTemp=0;
 8000ed0:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <fsm_mode+0x1e0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ed6:	e03b      	b.n	8000f50 <fsm_mode+0x1b8>
	case MODE4:
		status_A = MAN_GREEN;
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <fsm_mode+0x1c8>)
 8000eda:	2218      	movs	r2, #24
 8000edc:	601a      	str	r2, [r3, #0]
		status_B = MAN_GREEN;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <fsm_mode+0x1cc>)
 8000ee0:	2218      	movs	r2, #24
 8000ee2:	601a      	str	r2, [r3, #0]
		if(IsButtonPress(1) == 1){
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff f931 	bl	800014c <IsButtonPress>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d102      	bne.n	8000ef6 <fsm_mode+0x15e>
			status_mode = MODE0;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <fsm_mode+0x1c4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
		}
		if(IsButtonPress(2) == 1){
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f7ff f928 	bl	800014c <IsButtonPress>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d104      	bne.n	8000f0c <fsm_mode+0x174>
			// add value
			countTemp+=2;
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <fsm_mode+0x1e0>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	3302      	adds	r3, #2
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <fsm_mode+0x1e0>)
 8000f0a:	6013      	str	r3, [r2, #0]
		}
		if(IsButtonPress(3) == 1){
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f7ff f91d 	bl	800014c <IsButtonPress>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d11d      	bne.n	8000f54 <fsm_mode+0x1bc>
			//set value
			GREEN_Timer = GREEN_Timer + countTemp*1000;
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <fsm_mode+0x1e0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f20:	fb02 f203 	mul.w	r2, r2, r3
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <fsm_mode+0x1f0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <fsm_mode+0x1f0>)
 8000f2c:	6013      	str	r3, [r2, #0]
			count_GREEN += countTemp;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <fsm_mode+0x1d8>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <fsm_mode+0x1e0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <fsm_mode+0x1d8>)
 8000f3a:	6013      	str	r3, [r2, #0]
			countTemp=0;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <fsm_mode+0x1e0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f42:	e007      	b.n	8000f54 <fsm_mode+0x1bc>
	default:
		break;
 8000f44:	bf00      	nop
 8000f46:	e006      	b.n	8000f56 <fsm_mode+0x1be>
		break;
 8000f48:	bf00      	nop
 8000f4a:	e004      	b.n	8000f56 <fsm_mode+0x1be>
		break;
 8000f4c:	bf00      	nop
 8000f4e:	e002      	b.n	8000f56 <fsm_mode+0x1be>
		break;
 8000f50:	bf00      	nop
 8000f52:	e000      	b.n	8000f56 <fsm_mode+0x1be>
		break;
 8000f54:	bf00      	nop
	}
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000c8 	.word	0x200000c8
 8000f60:	200000c0 	.word	0x200000c0
 8000f64:	200000c4 	.word	0x200000c4
 8000f68:	2000006c 	.word	0x2000006c
 8000f6c:	20000108 	.word	0x20000108
 8000f70:	20000070 	.word	0x20000070
 8000f74:	2000010c 	.word	0x2000010c
 8000f78:	200000bc 	.word	0x200000bc
 8000f7c:	20000078 	.word	0x20000078
 8000f80:	2000007c 	.word	0x2000007c
 8000f84:	20000074 	.word	0x20000074
 8000f88:	20000080 	.word	0x20000080

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 fb38 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f818 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f000 f89e 	bl	80010d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f9c:	f000 f850 	bl	8001040 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <main+0x38>)
 8000fa2:	f001 fa8d 	bl	80024c0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

//  status_A = INIT;
//  status_B= INIT;

  setTimer(0,250);
 8000fa6:	21fa      	movs	r1, #250	; 0xfa
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 f925 	bl	80011f8 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  timer_check();
 8000fae:	f000 fa01 	bl	80013b4 <timer_check>
	  fsm_automatic_run();
 8000fb2:	f7ff fe71 	bl	8000c98 <fsm_automatic_run>
	  fsm_7seg_run();
 8000fb6:	f7ff fda3 	bl	8000b00 <fsm_7seg_run>
	  fsm_manual_run();
 8000fba:	f7ff fecd 	bl	8000d58 <fsm_manual_run>
	  fsm_mode();
 8000fbe:	f7ff feeb 	bl	8000d98 <fsm_mode>
	  timer_check();
 8000fc2:	e7f4      	b.n	8000fae <main+0x22>
 8000fc4:	20000110 	.word	0x20000110

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b090      	sub	sp, #64	; 0x40
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	2228      	movs	r2, #40	; 0x28
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fe22 	bl	8002c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fe32 	bl	8001c68 <HAL_RCC_OscConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800100a:	f000 f8ef 	bl	80011ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f001 f89e 	bl	8002168 <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001032:	f000 f8db 	bl	80011ec <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3740      	adds	r7, #64	; 0x40
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_TIM2_Init+0x94>)
 800105e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001062:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_TIM2_Init+0x94>)
 8001066:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800106a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_TIM2_Init+0x94>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_TIM2_Init+0x94>)
 8001074:	2209      	movs	r2, #9
 8001076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_TIM2_Init+0x94>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_TIM2_Init+0x94>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_TIM2_Init+0x94>)
 8001086:	f001 f9cb 	bl	8002420 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001090:	f000 f8ac 	bl	80011ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MX_TIM2_Init+0x94>)
 80010a2:	f001 fb49 	bl	8002738 <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010ac:	f000 f89e 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b8:	463b      	mov	r3, r7
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_TIM2_Init+0x94>)
 80010be:	f001 fd21 	bl	8002b04 <HAL_TIMEx_MasterConfigSynchronization>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010c8:	f000 f890 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000110 	.word	0x20000110

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <MX_GPIO_Init+0xec>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a34      	ldr	r2, [pc, #208]	; (80011c4 <MX_GPIO_Init+0xec>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <MX_GPIO_Init+0xec>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <MX_GPIO_Init+0xec>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <MX_GPIO_Init+0xec>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <MX_GPIO_Init+0xec>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <MX_GPIO_Init+0xec>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <MX_GPIO_Init+0xec>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <MX_GPIO_Init+0xec>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA3_Pin|PA4_Pin|PA5_Pin|PA6_Pin
 8001134:	2200      	movs	r2, #0
 8001136:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 800113a:	4823      	ldr	r0, [pc, #140]	; (80011c8 <MX_GPIO_Init+0xf0>)
 800113c:	f000 fd63 	bl	8001c06 <HAL_GPIO_WritePin>
                          |PA7_Pin|PA8_Pin|PA9_Pin|PA10_Pin
                          |PA11_Pin|PA12_Pin|PA13_Pin|PA14_Pin
                          |PA15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB0_Pin|PB1_Pin|PB2_Pin|PB10_Pin
 8001140:	2200      	movs	r2, #0
 8001142:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001146:	4821      	ldr	r0, [pc, #132]	; (80011cc <MX_GPIO_Init+0xf4>)
 8001148:	f000 fd5d 	bl	8001c06 <HAL_GPIO_WritePin>
                          |PB11_Pin|PB12_Pin|PB13_Pin|PB3_Pin
                          |PB4_Pin|PB5_Pin|PB6_Pin|PB7_Pin
                          |PB8_Pin|PB9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin;
 800114c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001156:	2301      	movs	r3, #1
 8001158:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON0_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	481b      	ldr	r0, [pc, #108]	; (80011d0 <MX_GPIO_Init+0xf8>)
 8001162:	f000 fbbf 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001166:	2307      	movs	r3, #7
 8001168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4619      	mov	r1, r3
 8001178:	4813      	ldr	r0, [pc, #76]	; (80011c8 <MX_GPIO_Init+0xf0>)
 800117a:	f000 fbb3 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_Pin PA4_Pin PA5_Pin PA6_Pin
                           PA7_Pin PA8_Pin PA9_Pin PA10_Pin
                           PA11_Pin PA12_Pin PA13_Pin PA14_Pin
                           PA15_Pin */
  GPIO_InitStruct.Pin = PA3_Pin|PA4_Pin|PA5_Pin|PA6_Pin
 800117e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001182:	613b      	str	r3, [r7, #16]
                          |PA7_Pin|PA8_Pin|PA9_Pin|PA10_Pin
                          |PA11_Pin|PA12_Pin|PA13_Pin|PA14_Pin
                          |PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2302      	movs	r3, #2
 800118e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	480c      	ldr	r0, [pc, #48]	; (80011c8 <MX_GPIO_Init+0xf0>)
 8001198:	f000 fba4 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_Pin PB1_Pin PB2_Pin PB10_Pin
                           PB11_Pin PB12_Pin PB13_Pin PB3_Pin
                           PB4_Pin PB5_Pin PB6_Pin PB7_Pin
                           PB8_Pin PB9_Pin */
  GPIO_InitStruct.Pin = PB0_Pin|PB1_Pin|PB2_Pin|PB10_Pin
 800119c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80011a0:	613b      	str	r3, [r7, #16]
                          |PB11_Pin|PB12_Pin|PB13_Pin|PB3_Pin
                          |PB4_Pin|PB5_Pin|PB6_Pin|PB7_Pin
                          |PB8_Pin|PB9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_GPIO_Init+0xf4>)
 80011b6:	f000 fb95 	bl	80018e4 <HAL_GPIO_Init>

}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010800 	.word	0x40010800
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	40011000 	.word	0x40011000

080011d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	timerun();
 80011dc:	f000 f82c 	bl	8001238 <timerun>
	getKeyInput();
 80011e0:	f7ff f814 	bl	800020c <getKeyInput>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <setTimer>:
#define TICK 10

int timer_flag[10];
int timer_counter[10];

void setTimer(int index, int counter) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <setTimer+0x34>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2100      	movs	r1, #0
 8001208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TICK;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <setTimer+0x38>)
 8001210:	fb82 1203 	smull	r1, r2, r2, r3
 8001214:	1092      	asrs	r2, r2, #2
 8001216:	17db      	asrs	r3, r3, #31
 8001218:	1ad2      	subs	r2, r2, r3
 800121a:	4906      	ldr	r1, [pc, #24]	; (8001234 <setTimer+0x3c>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	20000180 	.word	0x20000180
 8001230:	66666667 	.word	0x66666667
 8001234:	20000158 	.word	0x20000158

08001238 <timerun>:

void timerun() {
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	e01c      	b.n	800127e <timerun+0x46>
		if (timer_counter[i] >= 0) {
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <timerun+0x58>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db13      	blt.n	8001278 <timerun+0x40>
			timer_counter[i]--;
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <timerun+0x58>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	490d      	ldr	r1, [pc, #52]	; (8001290 <timerun+0x58>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <timerun+0x58>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	2b00      	cmp	r3, #0
 800126c:	dc04      	bgt.n	8001278 <timerun+0x40>
				timer_flag[i] = 1;
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <timerun+0x5c>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2101      	movs	r1, #1
 8001274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3301      	adds	r3, #1
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b09      	cmp	r3, #9
 8001282:	dddf      	ble.n	8001244 <timerun+0xc>
			}
		}
	}
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000158 	.word	0x20000158
 8001294:	20000180 	.word	0x20000180

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_MspInit+0x5c>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <HAL_MspInit+0x5c>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6193      	str	r3, [r2, #24]
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_MspInit+0x5c>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_MspInit+0x5c>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_MspInit+0x5c>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_MspInit+0x5c>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_MspInit+0x60>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_MspInit+0x60>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000

080012fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800130c:	d113      	bne.n	8001336 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_TIM_Base_MspInit+0x44>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <HAL_TIM_Base_MspInit+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_TIM_Base_MspInit+0x44>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	201c      	movs	r0, #28
 800132c:	f000 faa3 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001330:	201c      	movs	r0, #28
 8001332:	f000 fabc 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138a:	f000 f981 	bl	8001690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <TIM2_IRQHandler+0x10>)
 800139a:	f001 f8dd 	bl	8002558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000110 	.word	0x20000110

080013a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <timer_check>:

#include "timer_check.h"

int switch_7seg=0;

void timer_check(){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	if(timer_flag[0] == 1){
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <timer_check+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d117      	bne.n	80013f0 <timer_check+0x3c>
		HAL_GPIO_TogglePin(GPIOA, PA4_Pin);
 80013c0:	2110      	movs	r1, #16
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <timer_check+0x44>)
 80013c4:	f000 fc37 	bl	8001c36 <HAL_GPIO_TogglePin>
			update_7seg_A();
 80013c8:	f7ff f998 	bl	80006fc <update_7seg_A>
			update_7seg_B();
 80013cc:	f7ff f9cc 	bl	8000768 <update_7seg_B>
			if(switch_7seg == 3) switch_7seg = 0;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <timer_check+0x48>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d102      	bne.n	80013de <timer_check+0x2a>
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <timer_check+0x48>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
			switch_7seg++;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <timer_check+0x48>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	4a05      	ldr	r2, [pc, #20]	; (80013fc <timer_check+0x48>)
 80013e6:	6013      	str	r3, [r2, #0]
			setTimer(0,250);
 80013e8:	21fa      	movs	r1, #250	; 0xfa
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff ff04 	bl	80011f8 <setTimer>
	}
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000180 	.word	0x20000180
 80013f8:	40010800 	.word	0x40010800
 80013fc:	200000cc 	.word	0x200000cc

08001400 <status_LED_A>:
 *      Author: Hy
 */

#include "update_status_traffic.h"

void status_LED_A() {
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	switch (status_A) {
 8001404:	4b31      	ldr	r3, [pc, #196]	; (80014cc <status_LED_A+0xcc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3b0c      	subs	r3, #12
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d858      	bhi.n	80014c0 <status_LED_A+0xc0>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <status_LED_A+0x14>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001449 	.word	0x08001449
 8001418:	08001499 	.word	0x08001499
 800141c:	08001471 	.word	0x08001471
 8001420:	080014c1 	.word	0x080014c1
 8001424:	080014c1 	.word	0x080014c1
 8001428:	080014c1 	.word	0x080014c1
 800142c:	080014c1 	.word	0x080014c1
 8001430:	080014c1 	.word	0x080014c1
 8001434:	080014c1 	.word	0x080014c1
 8001438:	080014c1 	.word	0x080014c1
 800143c:	0800145d 	.word	0x0800145d
 8001440:	080014ad 	.word	0x080014ad
 8001444:	08001485 	.word	0x08001485
	case AUTO_RED:
		status_RED_A = 1;
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <status_LED_A+0xd0>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 0;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <status_LED_A+0xd4>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 0;
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <status_LED_A+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
		break;
 800145a:	e032      	b.n	80014c2 <status_LED_A+0xc2>
	case MAN_RED:
		status_RED_A = 1;
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <status_LED_A+0xd0>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 0;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <status_LED_A+0xd4>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 0;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <status_LED_A+0xd8>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
		break;
 800146e:	e028      	b.n	80014c2 <status_LED_A+0xc2>
	case AUTO_GREEN:
		status_RED_A = 0;
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <status_LED_A+0xd0>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 1;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <status_LED_A+0xd4>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 0;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <status_LED_A+0xd8>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
		break;
 8001482:	e01e      	b.n	80014c2 <status_LED_A+0xc2>
	case MAN_GREEN:
		status_RED_A = 0;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <status_LED_A+0xd0>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 1;
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <status_LED_A+0xd4>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 0;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <status_LED_A+0xd8>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
		break;
 8001496:	e014      	b.n	80014c2 <status_LED_A+0xc2>
	case AUTO_YELLOW:
		status_RED_A = 0;
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <status_LED_A+0xd0>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 0;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <status_LED_A+0xd4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <status_LED_A+0xd8>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	601a      	str	r2, [r3, #0]
		break;
 80014aa:	e00a      	b.n	80014c2 <status_LED_A+0xc2>
	case MAN_YELLOW:
		status_RED_A = 0;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <status_LED_A+0xd0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
		status_GREEN_A = 0;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <status_LED_A+0xd4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
		status_YELLOW_A = 1;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <status_LED_A+0xd8>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
		break;
 80014be:	e000      	b.n	80014c2 <status_LED_A+0xc2>
	default:
		break;
 80014c0:	bf00      	nop
	}
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200000c0 	.word	0x200000c0
 80014d0:	20000064 	.word	0x20000064
 80014d4:	200000ac 	.word	0x200000ac
 80014d8:	200000b0 	.word	0x200000b0

080014dc <status_LED_B>:

void status_LED_B(){
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	switch (status_B) {
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <status_LED_B+0xcc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3b0c      	subs	r3, #12
 80014e6:	2b0c      	cmp	r3, #12
 80014e8:	d858      	bhi.n	800159c <status_LED_B+0xc0>
 80014ea:	a201      	add	r2, pc, #4	; (adr r2, 80014f0 <status_LED_B+0x14>)
 80014ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f0:	08001525 	.word	0x08001525
 80014f4:	0800154d 	.word	0x0800154d
 80014f8:	08001539 	.word	0x08001539
 80014fc:	0800159d 	.word	0x0800159d
 8001500:	0800159d 	.word	0x0800159d
 8001504:	0800159d 	.word	0x0800159d
 8001508:	0800159d 	.word	0x0800159d
 800150c:	0800159d 	.word	0x0800159d
 8001510:	0800159d 	.word	0x0800159d
 8001514:	0800159d 	.word	0x0800159d
 8001518:	08001561 	.word	0x08001561
 800151c:	08001589 	.word	0x08001589
 8001520:	08001575 	.word	0x08001575
	case AUTO_RED:
		status_RED_B = 1;
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <status_LED_B+0xd0>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 0;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <status_LED_B+0xd4>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 0;
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <status_LED_B+0xd8>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
		break;
 8001536:	e032      	b.n	800159e <status_LED_B+0xc2>
	case AUTO_GREEN:
		status_RED_B = 0;
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <status_LED_B+0xd0>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 1;
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <status_LED_B+0xd4>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 0;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <status_LED_B+0xd8>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
		break;
 800154a:	e028      	b.n	800159e <status_LED_B+0xc2>
	case AUTO_YELLOW:
		status_RED_B = 0;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <status_LED_B+0xd0>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 0;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <status_LED_B+0xd4>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 1;
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <status_LED_B+0xd8>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]
		break;
 800155e:	e01e      	b.n	800159e <status_LED_B+0xc2>
	case MAN_RED:
		status_RED_B = 1;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <status_LED_B+0xd0>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 0;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <status_LED_B+0xd4>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 0;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <status_LED_B+0xd8>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
		break;
 8001572:	e014      	b.n	800159e <status_LED_B+0xc2>
	case MAN_GREEN:
		status_RED_B = 0;
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <status_LED_B+0xd0>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 1;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <status_LED_B+0xd4>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 0;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <status_LED_B+0xd8>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
		break;
 8001586:	e00a      	b.n	800159e <status_LED_B+0xc2>
	case MAN_YELLOW:
		status_RED_B = 0;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <status_LED_B+0xd0>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
		status_GREEN_B = 0;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <status_LED_B+0xd4>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
		status_YELLOW_B = 1;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <status_LED_B+0xd8>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
		break;
 800159a:	e000      	b.n	800159e <status_LED_B+0xc2>
	default:
		break;
 800159c:	bf00      	nop
	}
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200000c4 	.word	0x200000c4
 80015ac:	200000b4 	.word	0x200000b4
 80015b0:	20000068 	.word	0x20000068
 80015b4:	200000b8 	.word	0x200000b8

080015b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b8:	f7ff fef6 	bl	80013a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480b      	ldr	r0, [pc, #44]	; (80015ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015be:	490c      	ldr	r1, [pc, #48]	; (80015f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015c0:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015d4:	4c09      	ldr	r4, [pc, #36]	; (80015fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e2:	f001 faf9 	bl	8002bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015e6:	f7ff fcd1 	bl	8000f8c <main>
  bx lr
 80015ea:	4770      	bx	lr
  ldr r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80015f4:	08002c74 	.word	0x08002c74
  ldr r2, =_sbss
 80015f8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80015fc:	200001ac 	.word	0x200001ac

08001600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC1_2_IRQHandler>
	...

08001604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_Init+0x28>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_Init+0x28>)
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 f923 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161a:	200f      	movs	r0, #15
 800161c:	f000 f808 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001620:	f7ff fe3a 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40022000 	.word	0x40022000

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_InitTick+0x54>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x58>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f93b 	bl	80018ca <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00e      	b.n	800167c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b0f      	cmp	r3, #15
 8001662:	d80a      	bhi.n	800167a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001664:	2200      	movs	r2, #0
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f000 f903 	bl	8001876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001670:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_InitTick+0x5c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000084 	.word	0x20000084
 8001688:	2000008c 	.word	0x2000008c
 800168c:	20000088 	.word	0x20000088

08001690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_IncTick+0x1c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_IncTick+0x20>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <HAL_IncTick+0x20>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	2000008c 	.word	0x2000008c
 80016b0:	200001a8 	.word	0x200001a8

080016b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return uwTick;
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <HAL_GetTick+0x10>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	200001a8 	.word	0x200001a8

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4906      	ldr	r1, [pc, #24]	; (8001760 <__NVIC_EnableIRQ+0x34>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f7ff ff90 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff2d 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff42 	bl	8001710 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff90 	bl	80017b8 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5f 	bl	8001764 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff35 	bl	800172c <__NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffa2 	bl	800181c <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b08b      	sub	sp, #44	; 0x2c
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f6:	e148      	b.n	8001b8a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018f8:	2201      	movs	r2, #1
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 8137 	bne.w	8001b84 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4aa3      	ldr	r2, [pc, #652]	; (8001ba8 <HAL_GPIO_Init+0x2c4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d05e      	beq.n	80019de <HAL_GPIO_Init+0xfa>
 8001920:	4aa1      	ldr	r2, [pc, #644]	; (8001ba8 <HAL_GPIO_Init+0x2c4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d875      	bhi.n	8001a12 <HAL_GPIO_Init+0x12e>
 8001926:	4aa1      	ldr	r2, [pc, #644]	; (8001bac <HAL_GPIO_Init+0x2c8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d058      	beq.n	80019de <HAL_GPIO_Init+0xfa>
 800192c:	4a9f      	ldr	r2, [pc, #636]	; (8001bac <HAL_GPIO_Init+0x2c8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d86f      	bhi.n	8001a12 <HAL_GPIO_Init+0x12e>
 8001932:	4a9f      	ldr	r2, [pc, #636]	; (8001bb0 <HAL_GPIO_Init+0x2cc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d052      	beq.n	80019de <HAL_GPIO_Init+0xfa>
 8001938:	4a9d      	ldr	r2, [pc, #628]	; (8001bb0 <HAL_GPIO_Init+0x2cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d869      	bhi.n	8001a12 <HAL_GPIO_Init+0x12e>
 800193e:	4a9d      	ldr	r2, [pc, #628]	; (8001bb4 <HAL_GPIO_Init+0x2d0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d04c      	beq.n	80019de <HAL_GPIO_Init+0xfa>
 8001944:	4a9b      	ldr	r2, [pc, #620]	; (8001bb4 <HAL_GPIO_Init+0x2d0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d863      	bhi.n	8001a12 <HAL_GPIO_Init+0x12e>
 800194a:	4a9b      	ldr	r2, [pc, #620]	; (8001bb8 <HAL_GPIO_Init+0x2d4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d046      	beq.n	80019de <HAL_GPIO_Init+0xfa>
 8001950:	4a99      	ldr	r2, [pc, #612]	; (8001bb8 <HAL_GPIO_Init+0x2d4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d85d      	bhi.n	8001a12 <HAL_GPIO_Init+0x12e>
 8001956:	2b12      	cmp	r3, #18
 8001958:	d82a      	bhi.n	80019b0 <HAL_GPIO_Init+0xcc>
 800195a:	2b12      	cmp	r3, #18
 800195c:	d859      	bhi.n	8001a12 <HAL_GPIO_Init+0x12e>
 800195e:	a201      	add	r2, pc, #4	; (adr r2, 8001964 <HAL_GPIO_Init+0x80>)
 8001960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001964:	080019df 	.word	0x080019df
 8001968:	080019b9 	.word	0x080019b9
 800196c:	080019cb 	.word	0x080019cb
 8001970:	08001a0d 	.word	0x08001a0d
 8001974:	08001a13 	.word	0x08001a13
 8001978:	08001a13 	.word	0x08001a13
 800197c:	08001a13 	.word	0x08001a13
 8001980:	08001a13 	.word	0x08001a13
 8001984:	08001a13 	.word	0x08001a13
 8001988:	08001a13 	.word	0x08001a13
 800198c:	08001a13 	.word	0x08001a13
 8001990:	08001a13 	.word	0x08001a13
 8001994:	08001a13 	.word	0x08001a13
 8001998:	08001a13 	.word	0x08001a13
 800199c:	08001a13 	.word	0x08001a13
 80019a0:	08001a13 	.word	0x08001a13
 80019a4:	08001a13 	.word	0x08001a13
 80019a8:	080019c1 	.word	0x080019c1
 80019ac:	080019d5 	.word	0x080019d5
 80019b0:	4a82      	ldr	r2, [pc, #520]	; (8001bbc <HAL_GPIO_Init+0x2d8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019b6:	e02c      	b.n	8001a12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	623b      	str	r3, [r7, #32]
          break;
 80019be:	e029      	b.n	8001a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	3304      	adds	r3, #4
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	e024      	b.n	8001a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	3308      	adds	r3, #8
 80019d0:	623b      	str	r3, [r7, #32]
          break;
 80019d2:	e01f      	b.n	8001a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	330c      	adds	r3, #12
 80019da:	623b      	str	r3, [r7, #32]
          break;
 80019dc:	e01a      	b.n	8001a14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019e6:	2304      	movs	r3, #4
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e013      	b.n	8001a14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f4:	2308      	movs	r3, #8
 80019f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	611a      	str	r2, [r3, #16]
          break;
 80019fe:	e009      	b.n	8001a14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a00:	2308      	movs	r3, #8
 8001a02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	615a      	str	r2, [r3, #20]
          break;
 8001a0a:	e003      	b.n	8001a14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
          break;
 8001a10:	e000      	b.n	8001a14 <HAL_GPIO_Init+0x130>
          break;
 8001a12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2bff      	cmp	r3, #255	; 0xff
 8001a18:	d801      	bhi.n	8001a1e <HAL_GPIO_Init+0x13a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	e001      	b.n	8001a22 <HAL_GPIO_Init+0x13e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3304      	adds	r3, #4
 8001a22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2bff      	cmp	r3, #255	; 0xff
 8001a28:	d802      	bhi.n	8001a30 <HAL_GPIO_Init+0x14c>
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	e002      	b.n	8001a36 <HAL_GPIO_Init+0x152>
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	3b08      	subs	r3, #8
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	210f      	movs	r1, #15
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	401a      	ands	r2, r3
 8001a48:	6a39      	ldr	r1, [r7, #32]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	431a      	orrs	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8090 	beq.w	8001b84 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a64:	4b56      	ldr	r3, [pc, #344]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a55      	ldr	r2, [pc, #340]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_GPIO_Init+0x2dc>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a7c:	4a51      	ldr	r2, [pc, #324]	; (8001bc4 <HAL_GPIO_Init+0x2e0>)
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a49      	ldr	r2, [pc, #292]	; (8001bc8 <HAL_GPIO_Init+0x2e4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d00d      	beq.n	8001ac4 <HAL_GPIO_Init+0x1e0>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a48      	ldr	r2, [pc, #288]	; (8001bcc <HAL_GPIO_Init+0x2e8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d007      	beq.n	8001ac0 <HAL_GPIO_Init+0x1dc>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a47      	ldr	r2, [pc, #284]	; (8001bd0 <HAL_GPIO_Init+0x2ec>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d101      	bne.n	8001abc <HAL_GPIO_Init+0x1d8>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e004      	b.n	8001ac6 <HAL_GPIO_Init+0x1e2>
 8001abc:	2303      	movs	r3, #3
 8001abe:	e002      	b.n	8001ac6 <HAL_GPIO_Init+0x1e2>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_GPIO_Init+0x1e2>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac8:	f002 0203 	and.w	r2, r2, #3
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	4093      	lsls	r3, r2
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ad6:	493b      	ldr	r1, [pc, #236]	; (8001bc4 <HAL_GPIO_Init+0x2e0>)
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001af0:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4937      	ldr	r1, [pc, #220]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001afe:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4933      	ldr	r1, [pc, #204]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	492d      	ldr	r1, [pc, #180]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60cb      	str	r3, [r1, #12]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4929      	ldr	r1, [pc, #164]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4923      	ldr	r1, [pc, #140]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b4e:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	491f      	ldr	r1, [pc, #124]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4919      	ldr	r1, [pc, #100]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	4915      	ldr	r1, [pc, #84]	; (8001bd4 <HAL_GPIO_Init+0x2f0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	3301      	adds	r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f47f aeaf 	bne.w	80018f8 <HAL_GPIO_Init+0x14>
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	372c      	adds	r7, #44	; 0x2c
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	10320000 	.word	0x10320000
 8001bac:	10310000 	.word	0x10310000
 8001bb0:	10220000 	.word	0x10220000
 8001bb4:	10210000 	.word	0x10210000
 8001bb8:	10120000 	.word	0x10120000
 8001bbc:	10110000 	.word	0x10110000
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40010800 	.word	0x40010800
 8001bcc:	40010c00 	.word	0x40010c00
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	40010400 	.word	0x40010400

08001bd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	e001      	b.n	8001bfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	807b      	strh	r3, [r7, #2]
 8001c12:	4613      	mov	r3, r2
 8001c14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c16:	787b      	ldrb	r3, [r7, #1]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1c:	887a      	ldrh	r2, [r7, #2]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c22:	e003      	b.n	8001c2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c24:	887b      	ldrh	r3, [r7, #2]
 8001c26:	041a      	lsls	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	611a      	str	r2, [r3, #16]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c48:	887a      	ldrh	r2, [r7, #2]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	041a      	lsls	r2, r3, #16
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	400b      	ands	r3, r1
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	611a      	str	r2, [r3, #16]
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e26c      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8087 	beq.w	8001d96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c88:	4b92      	ldr	r3, [pc, #584]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d00c      	beq.n	8001cae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c94:	4b8f      	ldr	r3, [pc, #572]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d112      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5e>
 8001ca0:	4b8c      	ldr	r3, [pc, #560]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d10b      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d06c      	beq.n	8001d94 <HAL_RCC_OscConfig+0x12c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d168      	bne.n	8001d94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e246      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x76>
 8001cd0:	4b80      	ldr	r3, [pc, #512]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a7f      	ldr	r2, [pc, #508]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e02e      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x98>
 8001ce6:	4b7b      	ldr	r3, [pc, #492]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a7a      	ldr	r2, [pc, #488]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b78      	ldr	r3, [pc, #480]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a77      	ldr	r2, [pc, #476]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e01d      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0xbc>
 8001d0a:	4b72      	ldr	r3, [pc, #456]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a71      	ldr	r2, [pc, #452]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6e      	ldr	r2, [pc, #440]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001d24:	4b6b      	ldr	r3, [pc, #428]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6a      	ldr	r2, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b68      	ldr	r3, [pc, #416]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a67      	ldr	r2, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fcb6 	bl	80016b4 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fcb2 	bl	80016b4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1fa      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xe4>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fca2 	bl	80016b4 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff fc9e 	bl	80016b4 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1e6      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x10c>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d063      	beq.n	8001e6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da2:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dae:	4b49      	ldr	r3, [pc, #292]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d11c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x18c>
 8001dba:	4b46      	ldr	r3, [pc, #280]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d116      	bne.n	8001df4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	4b43      	ldr	r3, [pc, #268]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e1ba      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4939      	ldr	r1, [pc, #228]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	e03a      	b.n	8001e6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fc57 	bl	80016b4 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fc53 	bl	80016b4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e19b      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4927      	ldr	r1, [pc, #156]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fc36 	bl	80016b4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fc32 	bl	80016b4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e17a      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d03a      	beq.n	8001eec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d019      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <HAL_RCC_OscConfig+0x274>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7ff fc16 	bl	80016b4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fc12 	bl	80016b4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e15a      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f000 fa9a 	bl	80023e4 <RCC_Delay>
 8001eb0:	e01c      	b.n	8001eec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_RCC_OscConfig+0x274>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fbfc 	bl	80016b4 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebe:	e00f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fbf8 	bl	80016b4 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d908      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e140      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	42420000 	.word	0x42420000
 8001edc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	4b9e      	ldr	r3, [pc, #632]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e9      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a6 	beq.w	8002046 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efe:	4b97      	ldr	r3, [pc, #604]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b94      	ldr	r3, [pc, #592]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a93      	ldr	r2, [pc, #588]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b91      	ldr	r3, [pc, #580]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	4b8e      	ldr	r3, [pc, #568]	; (8002160 <HAL_RCC_OscConfig+0x4f8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d118      	bne.n	8001f64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f32:	4b8b      	ldr	r3, [pc, #556]	; (8002160 <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a8a      	ldr	r2, [pc, #552]	; (8002160 <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fbb9 	bl	80016b4 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7ff fbb5 	bl	80016b4 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	; 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e0fd      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	4b81      	ldr	r3, [pc, #516]	; (8002160 <HAL_RCC_OscConfig+0x4f8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x312>
 8001f6c:	4b7b      	ldr	r3, [pc, #492]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4a7a      	ldr	r2, [pc, #488]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6213      	str	r3, [r2, #32]
 8001f78:	e02d      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x334>
 8001f82:	4b76      	ldr	r3, [pc, #472]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a75      	ldr	r2, [pc, #468]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4b73      	ldr	r3, [pc, #460]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a72      	ldr	r2, [pc, #456]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	e01c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_OscConfig+0x356>
 8001fa4:	4b6d      	ldr	r3, [pc, #436]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a6c      	ldr	r2, [pc, #432]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a69      	ldr	r2, [pc, #420]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a66      	ldr	r2, [pc, #408]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	4b64      	ldr	r3, [pc, #400]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a63      	ldr	r2, [pc, #396]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d015      	beq.n	800200a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7ff fb69 	bl	80016b4 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff fb65 	bl	80016b4 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0ab      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	4b57      	ldr	r3, [pc, #348]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ee      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x37e>
 8002008:	e014      	b.n	8002034 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff fb53 	bl	80016b4 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff fb4f 	bl	80016b4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e095      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ee      	bne.n	8002012 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d105      	bne.n	8002046 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203a:	4b48      	ldr	r3, [pc, #288]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a47      	ldr	r2, [pc, #284]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8002040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002044:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8081 	beq.w	8002152 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002050:	4b42      	ldr	r3, [pc, #264]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d061      	beq.n	8002120 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d146      	bne.n	80020f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002064:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff fb23 	bl	80016b4 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7ff fb1f 	bl	80016b4 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e067      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002084:	4b35      	ldr	r3, [pc, #212]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002098:	d108      	bne.n	80020ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209a:	4b30      	ldr	r3, [pc, #192]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	492d      	ldr	r1, [pc, #180]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a19      	ldr	r1, [r3, #32]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	430b      	orrs	r3, r1
 80020be:	4927      	ldr	r1, [pc, #156]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff faf3 	bl	80016b4 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff faef 	bl	80016b4 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e037      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e4:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x46a>
 80020f0:	e02f      	b.n	8002152 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fadc 	bl	80016b4 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7ff fad8 	bl	80016b4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e020      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x498>
 800211e:	e018      	b.n	8002152 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e013      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_OscConfig+0x4f4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	429a      	cmp	r2, r3
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	40007000 	.word	0x40007000
 8002164:	42420060 	.word	0x42420060

08002168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0d0      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800217c:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d910      	bls.n	80021ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0207 	bic.w	r2, r3, #7
 8002192:	4965      	ldr	r1, [pc, #404]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b63      	ldr	r3, [pc, #396]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0b8      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d020      	beq.n	80021fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c4:	4b59      	ldr	r3, [pc, #356]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a58      	ldr	r2, [pc, #352]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021dc:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a52      	ldr	r2, [pc, #328]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e8:	4b50      	ldr	r3, [pc, #320]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	494d      	ldr	r1, [pc, #308]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d040      	beq.n	8002288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d107      	bne.n	800221e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b47      	ldr	r3, [pc, #284]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d115      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e07f      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002226:	4b41      	ldr	r3, [pc, #260]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e073      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002236:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e06b      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002246:	4b39      	ldr	r3, [pc, #228]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f023 0203 	bic.w	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4936      	ldr	r1, [pc, #216]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002258:	f7ff fa2c 	bl	80016b4 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	e00a      	b.n	8002276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002260:	f7ff fa28 	bl	80016b4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e053      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 020c 	and.w	r2, r3, #12
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	429a      	cmp	r2, r3
 8002286:	d1eb      	bne.n	8002260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d210      	bcs.n	80022b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b24      	ldr	r3, [pc, #144]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 0207 	bic.w	r2, r3, #7
 800229e:	4922      	ldr	r1, [pc, #136]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e032      	b.n	800231e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4916      	ldr	r1, [pc, #88]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	490e      	ldr	r1, [pc, #56]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022f6:	f000 f821 	bl	800233c <HAL_RCC_GetSysClockFreq>
 80022fa:	4602      	mov	r2, r0
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	490a      	ldr	r1, [pc, #40]	; (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 8002308:	5ccb      	ldrb	r3, [r1, r3]
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_RCC_ClockConfig+0x1cc>)
 8002310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1d0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f98a 	bl	8001630 <HAL_InitTick>

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40022000 	.word	0x40022000
 800232c:	40021000 	.word	0x40021000
 8002330:	08002c48 	.word	0x08002c48
 8002334:	20000084 	.word	0x20000084
 8002338:	20000088 	.word	0x20000088

0800233c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b04      	cmp	r3, #4
 8002364:	d002      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x30>
 8002366:	2b08      	cmp	r3, #8
 8002368:	d003      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x36>
 800236a:	e027      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800236e:	613b      	str	r3, [r7, #16]
      break;
 8002370:	e027      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	0c9b      	lsrs	r3, r3, #18
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	4a17      	ldr	r2, [pc, #92]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800237c:	5cd3      	ldrb	r3, [r2, r3]
 800237e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d010      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	0c5b      	lsrs	r3, r3, #17
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	4a11      	ldr	r2, [pc, #68]	; (80023dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800239e:	fb02 f203 	mul.w	r2, r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e004      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	613b      	str	r3, [r7, #16]
      break;
 80023ba:	e002      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80023be:	613b      	str	r3, [r7, #16]
      break;
 80023c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c2:	693b      	ldr	r3, [r7, #16]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	007a1200 	.word	0x007a1200
 80023d8:	08002c58 	.word	0x08002c58
 80023dc:	08002c68 	.word	0x08002c68
 80023e0:	003d0900 	.word	0x003d0900

080023e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <RCC_Delay+0x34>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <RCC_Delay+0x38>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0a5b      	lsrs	r3, r3, #9
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002400:	bf00      	nop
  }
  while (Delay --);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	60fa      	str	r2, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <RCC_Delay+0x1c>
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	20000084 	.word	0x20000084
 800241c:	10624dd3 	.word	0x10624dd3

08002420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e041      	b.n	80024b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe ff58 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f000 fa56 	bl	8002910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d001      	beq.n	80024d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e035      	b.n	8002544 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_TIM_Base_Start_IT+0x90>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d009      	beq.n	800250e <HAL_TIM_Base_Start_IT+0x4e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002502:	d004      	beq.n	800250e <HAL_TIM_Base_Start_IT+0x4e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_TIM_Base_Start_IT+0x94>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d111      	bne.n	8002532 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b06      	cmp	r3, #6
 800251e:	d010      	beq.n	8002542 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002530:	e007      	b.n	8002542 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40000400 	.word	0x40000400

08002558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d020      	beq.n	80025bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01b      	beq.n	80025bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0202 	mvn.w	r2, #2
 800258c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f998 	bl	80028d8 <HAL_TIM_IC_CaptureCallback>
 80025a8:	e005      	b.n	80025b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f98b 	bl	80028c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f99a 	bl	80028ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d020      	beq.n	8002608 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01b      	beq.n	8002608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0204 	mvn.w	r2, #4
 80025d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2202      	movs	r2, #2
 80025de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f972 	bl	80028d8 <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f965 	bl	80028c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f974 	bl	80028ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d020      	beq.n	8002654 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01b      	beq.n	8002654 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0208 	mvn.w	r2, #8
 8002624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2204      	movs	r2, #4
 800262a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f94c 	bl	80028d8 <HAL_TIM_IC_CaptureCallback>
 8002640:	e005      	b.n	800264e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f93f 	bl	80028c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f94e 	bl	80028ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	d020      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01b      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0210 	mvn.w	r2, #16
 8002670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2208      	movs	r2, #8
 8002676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f926 	bl	80028d8 <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f919 	bl	80028c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f928 	bl	80028ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00c      	beq.n	80026c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0201 	mvn.w	r2, #1
 80026bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe fd88 	bl	80011d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00c      	beq.n	80026e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fa6f 	bl	8002bc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8f8 	bl	80028fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00c      	beq.n	8002730 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0220 	mvn.w	r2, #32
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fa42 	bl	8002bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_TIM_ConfigClockSource+0x1c>
 8002750:	2302      	movs	r3, #2
 8002752:	e0b4      	b.n	80028be <HAL_TIM_ConfigClockSource+0x186>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800277a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278c:	d03e      	beq.n	800280c <HAL_TIM_ConfigClockSource+0xd4>
 800278e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002792:	f200 8087 	bhi.w	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279a:	f000 8086 	beq.w	80028aa <HAL_TIM_ConfigClockSource+0x172>
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	d87f      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027a4:	2b70      	cmp	r3, #112	; 0x70
 80027a6:	d01a      	beq.n	80027de <HAL_TIM_ConfigClockSource+0xa6>
 80027a8:	2b70      	cmp	r3, #112	; 0x70
 80027aa:	d87b      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b60      	cmp	r3, #96	; 0x60
 80027ae:	d050      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0x11a>
 80027b0:	2b60      	cmp	r3, #96	; 0x60
 80027b2:	d877      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b50      	cmp	r3, #80	; 0x50
 80027b6:	d03c      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0xfa>
 80027b8:	2b50      	cmp	r3, #80	; 0x50
 80027ba:	d873      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b40      	cmp	r3, #64	; 0x40
 80027be:	d058      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0x13a>
 80027c0:	2b40      	cmp	r3, #64	; 0x40
 80027c2:	d86f      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b30      	cmp	r3, #48	; 0x30
 80027c6:	d064      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x15a>
 80027c8:	2b30      	cmp	r3, #48	; 0x30
 80027ca:	d86b      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d060      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x15a>
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d867      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d05c      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x15a>
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d05a      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x15a>
 80027dc:	e062      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f000 f96a 	bl	8002ac6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	609a      	str	r2, [r3, #8]
      break;
 800280a:	e04f      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f000 f953 	bl	8002ac6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800282e:	609a      	str	r2, [r3, #8]
      break;
 8002830:	e03c      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	461a      	mov	r2, r3
 8002840:	f000 f8ca 	bl	80029d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2150      	movs	r1, #80	; 0x50
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f921 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 8002850:	e02c      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	f000 f8e8 	bl	8002a34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2160      	movs	r1, #96	; 0x60
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f911 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 8002870:	e01c      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	461a      	mov	r2, r3
 8002880:	f000 f8aa 	bl	80029d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2140      	movs	r1, #64	; 0x40
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f901 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 8002890:	e00c      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f000 f8f8 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 80028a2:	e003      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      break;
 80028a8:	e000      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
	...

08002910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <TIM_Base_SetConfig+0xc0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <TIM_Base_SetConfig+0x28>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292e:	d003      	beq.n	8002938 <TIM_Base_SetConfig+0x28>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a28      	ldr	r2, [pc, #160]	; (80029d4 <TIM_Base_SetConfig+0xc4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d108      	bne.n	800294a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a20      	ldr	r2, [pc, #128]	; (80029d0 <TIM_Base_SetConfig+0xc0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <TIM_Base_SetConfig+0x52>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002958:	d003      	beq.n	8002962 <TIM_Base_SetConfig+0x52>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <TIM_Base_SetConfig+0xc4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d108      	bne.n	8002974 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <TIM_Base_SetConfig+0xc0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d103      	bne.n	80029a8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f023 0201 	bic.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]
  }
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40000400 	.word	0x40000400

080029d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f023 0201 	bic.w	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f023 030a 	bic.w	r3, r3, #10
 8002a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f023 0210 	bic.w	r2, r3, #16
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	031b      	lsls	r3, r3, #12
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	621a      	str	r2, [r3, #32]
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f043 0307 	orr.w	r3, r3, #7
 8002ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b087      	sub	sp, #28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	021a      	lsls	r2, r3, #8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	609a      	str	r2, [r3, #8]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e041      	b.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a14      	ldr	r2, [pc, #80]	; (8002bac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d009      	beq.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b68:	d004      	beq.n	8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d10c      	bne.n	8002b8e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40000400 	.word	0x40000400

08002bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <__libc_init_array>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	2600      	movs	r6, #0
 8002bdc:	4d0c      	ldr	r5, [pc, #48]	; (8002c10 <__libc_init_array+0x38>)
 8002bde:	4c0d      	ldr	r4, [pc, #52]	; (8002c14 <__libc_init_array+0x3c>)
 8002be0:	1b64      	subs	r4, r4, r5
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	42a6      	cmp	r6, r4
 8002be6:	d109      	bne.n	8002bfc <__libc_init_array+0x24>
 8002be8:	f000 f822 	bl	8002c30 <_init>
 8002bec:	2600      	movs	r6, #0
 8002bee:	4d0a      	ldr	r5, [pc, #40]	; (8002c18 <__libc_init_array+0x40>)
 8002bf0:	4c0a      	ldr	r4, [pc, #40]	; (8002c1c <__libc_init_array+0x44>)
 8002bf2:	1b64      	subs	r4, r4, r5
 8002bf4:	10a4      	asrs	r4, r4, #2
 8002bf6:	42a6      	cmp	r6, r4
 8002bf8:	d105      	bne.n	8002c06 <__libc_init_array+0x2e>
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
 8002bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c00:	4798      	blx	r3
 8002c02:	3601      	adds	r6, #1
 8002c04:	e7ee      	b.n	8002be4 <__libc_init_array+0xc>
 8002c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0a:	4798      	blx	r3
 8002c0c:	3601      	adds	r6, #1
 8002c0e:	e7f2      	b.n	8002bf6 <__libc_init_array+0x1e>
 8002c10:	08002c6c 	.word	0x08002c6c
 8002c14:	08002c6c 	.word	0x08002c6c
 8002c18:	08002c6c 	.word	0x08002c6c
 8002c1c:	08002c70 	.word	0x08002c70

08002c20 <memset>:
 8002c20:	4603      	mov	r3, r0
 8002c22:	4402      	add	r2, r0
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d100      	bne.n	8002c2a <memset+0xa>
 8002c28:	4770      	bx	lr
 8002c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c2e:	e7f9      	b.n	8002c24 <memset+0x4>

08002c30 <_init>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr

08002c3c <_fini>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr
